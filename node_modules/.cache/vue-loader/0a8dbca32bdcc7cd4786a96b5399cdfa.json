{"remainingRequest":"/Users/erwinkarim/Websites/Snapped/snapped-mobile-master/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/erwinkarim/Websites/Snapped/snapped-mobile-master/node_modules/vue-radial-progress/src/RadialProgressBar.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/erwinkarim/Websites/Snapped/snapped-mobile-master/node_modules/vue-radial-progress/src/RadialProgressBar.vue","mtime":1680059914991},{"path":"/Users/erwinkarim/Websites/Snapped/snapped-mobile-master/node_modules/cache-loader/dist/cjs.js","mtime":1680070113546},{"path":"/Users/erwinkarim/Websites/Snapped/snapped-mobile-master/node_modules/babel-loader/lib/index.js","mtime":1680059914906},{"path":"/Users/erwinkarim/Websites/Snapped/snapped-mobile-master/node_modules/cache-loader/dist/cjs.js","mtime":1680070113546},{"path":"/Users/erwinkarim/Websites/Snapped/snapped-mobile-master/node_modules/vue-loader/lib/index.js","mtime":1680070113705}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmV4cG9ydCBkZWZhdWx0IHsKICBwcm9wczogewogICAgZGlhbWV0ZXI6IHsKICAgICAgdHlwZTogTnVtYmVyLAogICAgICByZXF1aXJlZDogZmFsc2UsCiAgICAgIGRlZmF1bHQ6IDIwMAogICAgfSwKICAgIHRvdGFsU3RlcHM6IHsKICAgICAgdHlwZTogTnVtYmVyLAogICAgICByZXF1aXJlZDogdHJ1ZSwKICAgICAgZGVmYXVsdDogMTAKICAgIH0sCiAgICBjb21wbGV0ZWRTdGVwczogewogICAgICB0eXBlOiBOdW1iZXIsCiAgICAgIHJlcXVpcmVkOiB0cnVlLAogICAgICBkZWZhdWx0OiAwCiAgICB9LAogICAgc3RhcnRDb2xvcjogewogICAgICB0eXBlOiBTdHJpbmcsCiAgICAgIHJlcXVpcmVkOiBmYWxzZSwKICAgICAgZGVmYXVsdDogJyNiYmZmNDInCiAgICB9LAogICAgc3RvcENvbG9yOiB7CiAgICAgIHR5cGU6IFN0cmluZywKICAgICAgcmVxdWlyZWQ6IGZhbHNlLAogICAgICBkZWZhdWx0OiAnIzQyOTMyMScKICAgIH0sCiAgICBzdHJva2VXaWR0aDogewogICAgICB0eXBlOiBOdW1iZXIsCiAgICAgIHJlcXVpcmVkOiBmYWxzZSwKICAgICAgZGVmYXVsdDogMTAKICAgIH0sCiAgICBpbm5lclN0cm9rZVdpZHRoOiB7CiAgICAgIHR5cGU6IE51bWJlciwKICAgICAgcmVxdWlyZWQ6IGZhbHNlLAogICAgICBkZWZhdWx0OiAxMAogICAgfSwKICAgIHN0cm9rZUxpbmVjYXA6IHsKICAgICAgdHlwZTogU3RyaW5nLAogICAgICByZXF1aXJlZDogZmFsc2UsCiAgICAgIGRlZmF1bHQ6ICdyb3VuZCcKICAgIH0sCiAgICBhbmltYXRlU3BlZWQ6IHsKICAgICAgdHlwZTogTnVtYmVyLAogICAgICByZXF1aXJlZDogZmFsc2UsCiAgICAgIGRlZmF1bHQ6IDEwMDAKICAgIH0sCiAgICBpbm5lclN0cm9rZUNvbG9yOiB7CiAgICAgIHR5cGU6IFN0cmluZywKICAgICAgcmVxdWlyZWQ6IGZhbHNlLAogICAgICBkZWZhdWx0OiAnIzMyMzIzMicKICAgIH0sCiAgICBmcHM6IHsKICAgICAgdHlwZTogTnVtYmVyLAogICAgICByZXF1aXJlZDogZmFsc2UsCiAgICAgIGRlZmF1bHQ6IDYwCiAgICB9LAogICAgdGltaW5nRnVuYzogewogICAgICB0eXBlOiBTdHJpbmcsCiAgICAgIHJlcXVpcmVkOiBmYWxzZSwKICAgICAgZGVmYXVsdDogJ2xpbmVhcicKICAgIH0sCiAgICBpc0Nsb2Nrd2lzZTogewogICAgICB0eXBlOiBCb29sZWFuLAogICAgICByZXF1aXJlZDogZmFsc2UsCiAgICAgIGRlZmF1bHQ6IHRydWUKICAgIH0KICB9LAoKICBkYXRhICgpIHsKICAgIHJldHVybiB7CiAgICAgIGdyYWRpZW50OiB7CiAgICAgICAgZng6IDAuOTksCiAgICAgICAgZnk6IDAuNSwKICAgICAgICBjeDogMC41LAogICAgICAgIGN5OiAwLjUsCiAgICAgICAgcjogMC42NQogICAgICB9LAogICAgICBncmFkaWVudEFuaW1hdGlvbjogbnVsbCwKICAgICAgY3VycmVudEFuZ2xlOiAwLAogICAgICBzdHJva2VEYXNob2Zmc2V0OiAwCiAgICB9CiAgfSwKCiAgY29tcHV0ZWQ6IHsKICAgIHJhZGl1cyAoKSB7CiAgICAgIHJldHVybiB0aGlzLmRpYW1ldGVyIC8gMgogICAgfSwKCiAgICBjaXJjdW1mZXJlbmNlICgpIHsKICAgICAgcmV0dXJuIE1hdGguUEkgKiB0aGlzLmlubmVyQ2lyY2xlRGlhbWV0ZXIKICAgIH0sCgogICAgc3RlcFNpemUgKCkgewogICAgICBpZiAodGhpcy50b3RhbFN0ZXBzID09PSAwKSB7CiAgICAgICAgcmV0dXJuIDAKICAgICAgfQoKICAgICAgcmV0dXJuIDEwMCAvIHRoaXMudG90YWxTdGVwcwogICAgfSwKCiAgICBmaW5pc2hlZFBlcmNlbnRhZ2UgKCkgewogICAgICByZXR1cm4gdGhpcy5zdGVwU2l6ZSAqIHRoaXMuY29tcGxldGVkU3RlcHMKICAgIH0sCgogICAgY2lyY2xlU2xpY2UgKCkgewogICAgICByZXR1cm4gMiAqIE1hdGguUEkgLyB0aGlzLnRvdGFsU3RlcHMKICAgIH0sCgogICAgYW5pbWF0ZVNsaWNlICgpIHsKICAgICAgcmV0dXJuIHRoaXMuY2lyY2xlU2xpY2UgLyB0aGlzLnRvdGFsUG9pbnRzCiAgICB9LAoKICAgIGlubmVyQ2lyY2xlRGlhbWV0ZXIgKCkgewogICAgICByZXR1cm4gdGhpcy5kaWFtZXRlciAtICh0aGlzLmlubmVyU3Ryb2tlV2lkdGggKiAyKQogICAgfSwKCiAgICBpbm5lckNpcmNsZVJhZGl1cyAoKSB7CiAgICAgIHJldHVybiB0aGlzLmlubmVyQ2lyY2xlRGlhbWV0ZXIgLyAyCiAgICB9LAoKICAgIHRvdGFsUG9pbnRzICgpIHsKICAgICAgcmV0dXJuIHRoaXMuYW5pbWF0ZVNwZWVkIC8gdGhpcy5hbmltYXRpb25JbmNyZW1lbnRzCiAgICB9LAoKICAgIGFuaW1hdGlvbkluY3JlbWVudHMgKCkgewogICAgICByZXR1cm4gMTAwMCAvIHRoaXMuZnBzCiAgICB9LAoKICAgIGhhc0dyYWRpZW50ICgpIHsKICAgICAgcmV0dXJuIHRoaXMuc3RhcnRDb2xvciAhPT0gdGhpcy5zdG9wQ29sb3IKICAgIH0sCgogICAgY29udGFpbmVyU3R5bGUgKCkgewogICAgICByZXR1cm4gewogICAgICAgIGhlaWdodDogYCR7dGhpcy5kaWFtZXRlcn1weGAsCiAgICAgICAgd2lkdGg6IGAke3RoaXMuZGlhbWV0ZXJ9cHhgCiAgICAgIH0KICAgIH0sCgogICAgcHJvZ3Jlc3NTdHlsZSAoKSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgaGVpZ2h0OiBgJHt0aGlzLmRpYW1ldGVyfXB4YCwKICAgICAgICB3aWR0aDogYCR7dGhpcy5kaWFtZXRlcn1weGAsCiAgICAgICAgc3Ryb2tlV2lkdGg6IGAke3RoaXMuc3Ryb2tlV2lkdGh9cHhgLAogICAgICAgIHN0cm9rZURhc2hvZmZzZXQ6IHRoaXMuc3Ryb2tlRGFzaG9mZnNldCwKICAgICAgICB0cmFuc2l0aW9uOiBgc3Ryb2tlLWRhc2hvZmZzZXQgJHt0aGlzLmFuaW1hdGVTcGVlZH1tcyAke3RoaXMudGltaW5nRnVuY31gCiAgICAgIH0KICAgIH0sCgogICAgc3Ryb2tlU3R5bGUgKCkgewogICAgICByZXR1cm4gewogICAgICAgIGhlaWdodDogYCR7dGhpcy5kaWFtZXRlcn1weGAsCiAgICAgICAgd2lkdGg6IGAke3RoaXMuZGlhbWV0ZXJ9cHhgLAogICAgICAgIHN0cm9rZVdpZHRoOiBgJHt0aGlzLmlubmVyU3Ryb2tlV2lkdGh9cHhgCiAgICAgIH0KICAgIH0sCgogICAgaW5uZXJDaXJjbGVTdHlsZSAoKSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgd2lkdGg6IGAke3RoaXMuaW5uZXJDaXJjbGVEaWFtZXRlcn1weGAKICAgICAgfQogICAgfSwKICB9LAoKICBtZXRob2RzOiB7CiAgICBnZXRTdG9wUG9pbnRzT2ZDaXJjbGUgKHN0ZXBzKSB7CiAgICAgIGNvbnN0IHBvaW50cyA9IFtdCgogICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ZXBzOyBpKyspIHsKICAgICAgICBjb25zdCBhbmdsZSA9IHRoaXMuY2lyY2xlU2xpY2UgKiBpCiAgICAgICAgcG9pbnRzLnB1c2godGhpcy5nZXRQb2ludE9mQ2lyY2xlKGFuZ2xlKSkKICAgICAgfQoKICAgICAgcmV0dXJuIHBvaW50cwogICAgfSwKCiAgICBnZXRQb2ludE9mQ2lyY2xlIChhbmdsZSkgewogICAgICBjb25zdCByYWRpdXMgPSAwLjUKCiAgICAgIGNvbnN0IHggPSByYWRpdXMgKyAocmFkaXVzICogTWF0aC5jb3MoYW5nbGUpKQogICAgICBjb25zdCB5ID0gcmFkaXVzICsgKHJhZGl1cyAqIE1hdGguc2luKGFuZ2xlKSkKCiAgICAgIHJldHVybiB7IHgsIHkgfQogICAgfSwKCiAgICBnb3RvUG9pbnQgKCkgewogICAgICBjb25zdCBwb2ludCA9IHRoaXMuZ2V0UG9pbnRPZkNpcmNsZSh0aGlzLmN1cnJlbnRBbmdsZSkKCiAgICAgIGlmIChwb2ludC54ICYmIHBvaW50LnkpIHsKICAgICAgICB0aGlzLmdyYWRpZW50LmZ4ID0gcG9pbnQueAogICAgICAgIHRoaXMuZ3JhZGllbnQuZnkgPSBwb2ludC55CiAgICAgIH0KICAgIH0sCgogICAgZGlyZWN0aW9uICgpIHsKICAgICAgaWYgKHRoaXMuaXNDbG9ja3dpc2UpIHsKICAgICAgICByZXR1cm4gMQogICAgICB9CiAgICAgIHJldHVybiAtMQogICAgfSwKCiAgICBjaGFuZ2VQcm9ncmVzcyAoeyBpc0FuaW1hdGUgPSB0cnVlIH0pIHsKICAgICAgdGhpcy5zdHJva2VEYXNob2Zmc2V0ID0gKCgxMDAgLSB0aGlzLmZpbmlzaGVkUGVyY2VudGFnZSkgLyAxMDApICogdGhpcy5jaXJjdW1mZXJlbmNlICogdGhpcy5kaXJlY3Rpb24oKQoKICAgICAgaWYgKHRoaXMuZ3JhZGllbnRBbmltYXRpb24pIHsKICAgICAgICBjbGVhckludGVydmFsKHRoaXMuZ3JhZGllbnRBbmltYXRpb24pCiAgICAgIH0KCiAgICAgIGlmICghaXNBbmltYXRlKSB7CiAgICAgICAgdGhpcy5nb3RvTmV4dFN0ZXAoKQogICAgICAgIHJldHVybgogICAgICB9CgogICAgICBjb25zdCBhbmdsZU9mZnNldCA9ICh0aGlzLmNvbXBsZXRlZFN0ZXBzIC0gMSkgKiB0aGlzLmNpcmNsZVNsaWNlCiAgICAgIGxldCBpID0gKHRoaXMuY3VycmVudEFuZ2xlIC0gYW5nbGVPZmZzZXQpIC8gdGhpcy5hbmltYXRlU2xpY2UKICAgICAgY29uc3QgaW5jcmVtZW50ZXIgPSBNYXRoLmFicyhpIC0gdGhpcy50b3RhbFBvaW50cykgLyB0aGlzLnRvdGFsUG9pbnRzCiAgICAgIGNvbnN0IGlzTW92ZUZvcndhcmQgPSBpIDwgdGhpcy50b3RhbFBvaW50cwoKICAgICAgdGhpcy5ncmFkaWVudEFuaW1hdGlvbiA9IHNldEludGVydmFsKCgpID0+IHsKICAgICAgICBpZiAoaXNNb3ZlRm9yd2FyZCAmJiBpID49IHRoaXMudG90YWxQb2ludHMgfHwKICAgICAgICAgICAgIWlzTW92ZUZvcndhcmQgJiYgaSA8IHRoaXMudG90YWxQb2ludHMpIHsKICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5ncmFkaWVudEFuaW1hdGlvbikKICAgICAgICAgIHJldHVybgogICAgICAgIH0KCiAgICAgICAgdGhpcy5jdXJyZW50QW5nbGUgPSBhbmdsZU9mZnNldCArICh0aGlzLmFuaW1hdGVTbGljZSAqIGkpCiAgICAgICAgdGhpcy5nb3RvUG9pbnQoKQoKICAgICAgICBpICs9IGlzTW92ZUZvcndhcmQgPyBpbmNyZW1lbnRlciA6IC1pbmNyZW1lbnRlcgogICAgICB9LCB0aGlzLmFuaW1hdGlvbkluY3JlbWVudHMpCiAgICB9LAoKICAgIGdvdG9OZXh0U3RlcCAoKSB7CiAgICAgIHRoaXMuY3VycmVudEFuZ2xlID0gdGhpcy5jb21wbGV0ZWRTdGVwcyAqIHRoaXMuY2lyY2xlU2xpY2UKICAgICAgdGhpcy5nb3RvUG9pbnQoKQogICAgfQogIH0sCgogIHdhdGNoOiB7CiAgICB0b3RhbFN0ZXBzICgpIHsKICAgICAgdGhpcy5jaGFuZ2VQcm9ncmVzcyh7IGlzQW5pbWF0ZTogdHJ1ZSB9KQogICAgfSwKCiAgICBjb21wbGV0ZWRTdGVwcyAoKSB7CiAgICAgIHRoaXMuY2hhbmdlUHJvZ3Jlc3MoeyBpc0FuaW1hdGU6IHRydWUgfSkKICAgIH0sCgogICAgZGlhbWV0ZXIgKCkgewogICAgICB0aGlzLmNoYW5nZVByb2dyZXNzKHsgaXNBbmltYXRlOiB0cnVlIH0pCiAgICB9LAoKICAgIHN0cm9rZVdpZHRoICgpIHsKICAgICAgdGhpcy5jaGFuZ2VQcm9ncmVzcyh7IGlzQW5pbWF0ZTogdHJ1ZSB9KQogICAgfQogIH0sCgogIGNyZWF0ZWQgKCkgewogICAgdGhpcy5jaGFuZ2VQcm9ncmVzcyh7IGlzQW5pbWF0ZTogZmFsc2UgfSkKICB9Cn0K"},{"version":3,"sources":["RadialProgressBar.vue"],"names":[],"mappings":";AA6CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"RadialProgressBar.vue","sourceRoot":"node_modules/vue-radial-progress/src","sourcesContent":["<template>\n  <div class=\"radial-progress-container\" :style=\"containerStyle\">\n    <div class=\"radial-progress-inner\" :style=\"innerCircleStyle\">\n      <slot></slot>\n    </div>\n    <svg class=\"radial-progress-bar\"\n         :width=\"diameter\"\n         :height=\"diameter\"\n         version=\"1.1\"\n         xmlns=\"http://www.w3.org/2000/svg\">\n      <defs>\n        <radialGradient :id=\"'radial-gradient' + _uid\"\n                        :fx=\"gradient.fx\"\n                        :fy=\"gradient.fy\"\n                        :cx=\"gradient.cx\"\n                        :cy=\"gradient.cy\"\n                        :r=\"gradient.r\">\n          <stop offset=\"30%\" :stop-color=\"startColor\"/>\n          <stop offset=\"100%\" :stop-color=\"stopColor\"/>\n        </radialGradient>\n      </defs>\n      <circle :r=\"innerCircleRadius\"\n              :cx=\"radius\"\n              :cy=\"radius\"\n              fill=\"transparent\"\n              :stroke=\"innerStrokeColor\"\n              :stroke-dasharray=\"circumference\"\n              stroke-dashoffset=\"0\"\n              :stroke-linecap=\"strokeLinecap\"\n              :style=\"strokeStyle\"></circle>\n      <circle :transform=\"'rotate(270, ' + radius + ',' + radius + ')'\"\n              :r=\"innerCircleRadius\"\n              :cx=\"radius\"\n              :cy=\"radius\"\n              fill=\"transparent\"\n              :stroke=\"'url(#radial-gradient' + _uid + ')'\"\n              :stroke-dasharray=\"circumference\"\n              :stroke-dashoffset=\"circumference\"\n              :stroke-linecap=\"strokeLinecap\"\n              :style=\"progressStyle\"></circle>\n    </svg>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: {\n    diameter: {\n      type: Number,\n      required: false,\n      default: 200\n    },\n    totalSteps: {\n      type: Number,\n      required: true,\n      default: 10\n    },\n    completedSteps: {\n      type: Number,\n      required: true,\n      default: 0\n    },\n    startColor: {\n      type: String,\n      required: false,\n      default: '#bbff42'\n    },\n    stopColor: {\n      type: String,\n      required: false,\n      default: '#429321'\n    },\n    strokeWidth: {\n      type: Number,\n      required: false,\n      default: 10\n    },\n    innerStrokeWidth: {\n      type: Number,\n      required: false,\n      default: 10\n    },\n    strokeLinecap: {\n      type: String,\n      required: false,\n      default: 'round'\n    },\n    animateSpeed: {\n      type: Number,\n      required: false,\n      default: 1000\n    },\n    innerStrokeColor: {\n      type: String,\n      required: false,\n      default: '#323232'\n    },\n    fps: {\n      type: Number,\n      required: false,\n      default: 60\n    },\n    timingFunc: {\n      type: String,\n      required: false,\n      default: 'linear'\n    },\n    isClockwise: {\n      type: Boolean,\n      required: false,\n      default: true\n    }\n  },\n\n  data () {\n    return {\n      gradient: {\n        fx: 0.99,\n        fy: 0.5,\n        cx: 0.5,\n        cy: 0.5,\n        r: 0.65\n      },\n      gradientAnimation: null,\n      currentAngle: 0,\n      strokeDashoffset: 0\n    }\n  },\n\n  computed: {\n    radius () {\n      return this.diameter / 2\n    },\n\n    circumference () {\n      return Math.PI * this.innerCircleDiameter\n    },\n\n    stepSize () {\n      if (this.totalSteps === 0) {\n        return 0\n      }\n\n      return 100 / this.totalSteps\n    },\n\n    finishedPercentage () {\n      return this.stepSize * this.completedSteps\n    },\n\n    circleSlice () {\n      return 2 * Math.PI / this.totalSteps\n    },\n\n    animateSlice () {\n      return this.circleSlice / this.totalPoints\n    },\n\n    innerCircleDiameter () {\n      return this.diameter - (this.innerStrokeWidth * 2)\n    },\n\n    innerCircleRadius () {\n      return this.innerCircleDiameter / 2\n    },\n\n    totalPoints () {\n      return this.animateSpeed / this.animationIncrements\n    },\n\n    animationIncrements () {\n      return 1000 / this.fps\n    },\n\n    hasGradient () {\n      return this.startColor !== this.stopColor\n    },\n\n    containerStyle () {\n      return {\n        height: `${this.diameter}px`,\n        width: `${this.diameter}px`\n      }\n    },\n\n    progressStyle () {\n      return {\n        height: `${this.diameter}px`,\n        width: `${this.diameter}px`,\n        strokeWidth: `${this.strokeWidth}px`,\n        strokeDashoffset: this.strokeDashoffset,\n        transition: `stroke-dashoffset ${this.animateSpeed}ms ${this.timingFunc}`\n      }\n    },\n\n    strokeStyle () {\n      return {\n        height: `${this.diameter}px`,\n        width: `${this.diameter}px`,\n        strokeWidth: `${this.innerStrokeWidth}px`\n      }\n    },\n\n    innerCircleStyle () {\n      return {\n        width: `${this.innerCircleDiameter}px`\n      }\n    },\n  },\n\n  methods: {\n    getStopPointsOfCircle (steps) {\n      const points = []\n\n      for (let i = 0; i < steps; i++) {\n        const angle = this.circleSlice * i\n        points.push(this.getPointOfCircle(angle))\n      }\n\n      return points\n    },\n\n    getPointOfCircle (angle) {\n      const radius = 0.5\n\n      const x = radius + (radius * Math.cos(angle))\n      const y = radius + (radius * Math.sin(angle))\n\n      return { x, y }\n    },\n\n    gotoPoint () {\n      const point = this.getPointOfCircle(this.currentAngle)\n\n      if (point.x && point.y) {\n        this.gradient.fx = point.x\n        this.gradient.fy = point.y\n      }\n    },\n\n    direction () {\n      if (this.isClockwise) {\n        return 1\n      }\n      return -1\n    },\n\n    changeProgress ({ isAnimate = true }) {\n      this.strokeDashoffset = ((100 - this.finishedPercentage) / 100) * this.circumference * this.direction()\n\n      if (this.gradientAnimation) {\n        clearInterval(this.gradientAnimation)\n      }\n\n      if (!isAnimate) {\n        this.gotoNextStep()\n        return\n      }\n\n      const angleOffset = (this.completedSteps - 1) * this.circleSlice\n      let i = (this.currentAngle - angleOffset) / this.animateSlice\n      const incrementer = Math.abs(i - this.totalPoints) / this.totalPoints\n      const isMoveForward = i < this.totalPoints\n\n      this.gradientAnimation = setInterval(() => {\n        if (isMoveForward && i >= this.totalPoints ||\n            !isMoveForward && i < this.totalPoints) {\n          clearInterval(this.gradientAnimation)\n          return\n        }\n\n        this.currentAngle = angleOffset + (this.animateSlice * i)\n        this.gotoPoint()\n\n        i += isMoveForward ? incrementer : -incrementer\n      }, this.animationIncrements)\n    },\n\n    gotoNextStep () {\n      this.currentAngle = this.completedSteps * this.circleSlice\n      this.gotoPoint()\n    }\n  },\n\n  watch: {\n    totalSteps () {\n      this.changeProgress({ isAnimate: true })\n    },\n\n    completedSteps () {\n      this.changeProgress({ isAnimate: true })\n    },\n\n    diameter () {\n      this.changeProgress({ isAnimate: true })\n    },\n\n    strokeWidth () {\n      this.changeProgress({ isAnimate: true })\n    }\n  },\n\n  created () {\n    this.changeProgress({ isAnimate: false })\n  }\n}\n</script>\n\n<style>\n.radial-progress-container {\n  position: relative;\n}\n\n.radial-progress-inner {\n  position: absolute;\n  top: 0; right: 0; bottom: 0; left: 0;\n  position: absolute;\n  border-radius: 50%;\n  margin: 0 auto;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n</style>\n"]}]}