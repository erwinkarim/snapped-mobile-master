{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport TeacherRepository from \"@/repositories/TeacherRepository\";\nimport moment from \"moment\";\nimport Repository from \"@/repositories/Repository\";\nimport getters from \"@/store/getters\";\nimport { get } from \"v-calendar/src/utils/_\";\n\n/*\n\tstate to handle assignment creations\n\t1. question creation\n\tthe gist is ;-\n\tcreation question => creatingQuestionDetails\n\n\twhen press 'save' (in CreateQuestionForm.vue)\n\t* save<XXX>ToDraf\n\t\t* creatingQuestionDetails => questionDraft\n\n\twhen press 'save' again (in TeacherAssignments/Create/Index.vue)\n\t* calls saveQuestion\n\t\t* questionDraft => assignmentDetails.question\n\t\t* questionDraft is cleared\n\t\t* change the state from isCreatingQuestion to isWritingQuestion\n\n\twhen press publish\n\t* sendData is called to push the question to the server/db\n*/\nexport default {\n  namespaced: true,\n  state: () => ({\n    // STATES\n    states: {\n      isMain: true,\n      isCreatingQuestion: false,\n      isCreatingZoomQuestion: false,\n      isSelectingDuration: false,\n      isSelectingQuestionType: false,\n      isWritingQuestion: false,\n      isSnappingQuestion: false,\n      isZoomQuestion: false,\n      isCroppingSnappedQuestion: false,\n      isResettingQuestion: false,\n      isShowingScheduler: false,\n      isPublishing: false,\n      isPublished: false,\n      isShowingError: false,\n      isInZoomMeeting: false,\n      isVideoOn: false,\n      isMicOn: false,\n      isRecording: false,\n      isScreenShare: false,\n      meeting_id: null\n    },\n    // Main details to be submitted\n    assignmentDetails: {\n      title: null,\n      school_id: \"\",\n      subject_id: \"\",\n      classroom_id: null,\n      due_datetime: null,\n      question: {\n        type: null,\n        title: null,\n        writtenQuestion: null,\n        snappedQuestions: [],\n        snappedPreviews: [],\n        zoomMeetings: null\n      },\n      published_at: moment()\n    },\n    // Questions' draft, serve as temporary save point while creating question.\n    // When draft is saved, load into assignment details\n    questionDraft: {\n      type: null,\n      title: null,\n      writtenQuestion: null,\n      snappedQuestions: [],\n      snappedPreviews: [],\n      zoomMeetings: null\n    },\n    // Currently creating question details. To be used instantaneous.\n    // When saved, load into question draft\n    creatingQuestionDetails: {\n      type: null,\n      title: null,\n      writtenQuestion: null,\n      snappedQuestions: [],\n      snappedPreviews: [],\n      zoomMeetings: null\n    },\n    selectables: {\n      schools: [],\n      subjects: [],\n      classrooms: []\n    },\n    errors: []\n  }),\n  mutations: {\n    toggleCreatingQuestionMode(state) {\n      state.states.isMain = !state.states.isMain;\n      state.states.isCreatingQuestion = !state.states.isCreatingQuestion;\n      state.states.isSelectingQuestionType = !state.states.isSelectingQuestionType;\n    },\n    cancelCreatingQuestionMode(state) {\n      state.states.isMain = true;\n      state.states.isCreatingQuestion = false;\n      state.states.isCreatingZoomQuestion = false;\n      state.states.isSelectingQuestionType = false;\n      state.states.isWritingQuestion = false;\n      state.states.isSnappingQuestion = false;\n      state.states.isZoomQuestion = false;\n    },\n    beginEditingQuestionMode(state, savedQuestionType) {\n      state.states.isMain = false;\n      state.states.isCreatingQuestion = true;\n      state.states.isSelectingQuestionType = false;\n      state.states.isEditingQuestion = true;\n      state.states.isSnappingQuestion = savedQuestionType === 'snapped';\n      state.states.isZoomQuestion = savedQuestionType === 'zoom';\n    },\n    beginEditingWrittenQuestionMode(state) {\n      state.states.isSelectingQuestionType = false;\n      state.states.isWritingQuestion = true;\n    },\n    toggleSelectingDurationMode(state) {\n      state.states.isSelectingDuration = !state.states.isSelectingDuration;\n    },\n    toggleWritingQuestionMode(state) {\n      state.states.isSelectingQuestionType = !state.states.isSelectingQuestionType;\n      state.states.isWritingQuestion = !state.states.isWritingQuestion;\n    },\n    toogleZoomQuestionMode(state) {\n      state.states.isSelectingQuestionType = !state.states.isSelectingQuestionType;\n      state.states.isCreatingZoomQuestion = !state.states.isCreatingZoomQuestion;\n    },\n    toggleSnappingQuestionMode(state) {\n      state.states.isSelectingQuestionType = !state.states.isSelectingQuestionType;\n      state.states.isSnappingQuestion = !state.states.isSnappingQuestion;\n    },\n    toggleShowingErrorMode(state) {\n      state.states.isShowingError = !state.states.isShowingError;\n    },\n    toggleShowingSchedulerMode(state) {\n      state.states.isShowingScheduler = !state.states.isShowingScheduler;\n    },\n    togglePublishingMode(state) {\n      state.states.isPublishing = !state.states.isPublishing;\n    },\n    togglePublishedMode(state) {\n      state.states.isPublished = !state.states.isPublished;\n    },\n    toggleIsSelectingDuration(state) {\n      state.states.isSelectingDuration = !state.states.isSelectingDuration;\n    },\n    toggleIsInZoomMeeting(state) {\n      state.states.isInZoomMeeting = !state.states.isInZoomMeeting;\n    },\n    toggleSnappedQuestionPreviewStatus(state, key) {\n      state.creatingQuestionDetails.snappedPreviews[key].preview = !state.creatingQuestionDetails.snappedPreviews[key].preview;\n      state.creatingQuestionDetails.snappedPreviews[key].cropping = false;\n    },\n    toggleCroppingSnappedQuestionMode(state, key) {\n      state.creatingQuestionDetails.snappedPreviews[key].preview = !state.creatingQuestionDetails.snappedPreviews[key].preview;\n      state.creatingQuestionDetails.snappedPreviews[key].cropping = !state.creatingQuestionDetails.snappedPreviews[key].cropping;\n    },\n    toggleVideo(state) {\n      state.states.isVideoOn = !state.states.isVideoOn;\n      console.log('inside toggleVideo fn', state.states.isVideoOn);\n    },\n    toggleMic(state) {\n      state.states.isMicOn = !state.states.isMicOn;\n      console.log('toogle mic button');\n    },\n    toggleShareScreen(state) {\n      state.states.isScreenShare = !state.states.isScreenShare;\n      console.log('inside toggleShareScreen fn', state.states.isScreenShare);\n    },\n    toggleRecording(state) {\n      state.states.isRecording = !state.states.isRecording;\n    },\n    // push creatingQuestionsDetails -> questionDraft\n    saveQuestionToDraft(state) {\n      console.log('creatingQuestionDetails.zoomMeetings', state.creatingQuestionDetails.zoomMeetings);\n      state.questionDraft = {\n        type: JSON.parse(JSON.stringify(state.creatingQuestionDetails.type)),\n        title: JSON.parse(JSON.stringify(state.creatingQuestionDetails.title)),\n        writtenQuestion: JSON.parse(JSON.stringify(state.creatingQuestionDetails.writtenQuestion)),\n        snappedQuestions: JSON.parse(JSON.stringify(state.creatingQuestionDetails.snappedQuestions)),\n        snappedPreviews: JSON.parse(JSON.stringify(state.creatingQuestionDetails.snappedPreviews)),\n        zoomMeetings: state.creatingQuestionDetails.zoomMeetings\n      };\n    },\n    // push questionDraft -> assignmentDetails.question\n    saveQuestionToAssignmentDetails(state) {\n      state.assignmentDetails.question = {\n        type: JSON.parse(JSON.stringify(state.questionDraft.type)),\n        title: JSON.parse(JSON.stringify(state.questionDraft.title)),\n        writtenQuestion: JSON.parse(JSON.stringify(state.questionDraft.writtenQuestion)),\n        snappedQuestions: JSON.parse(JSON.stringify(state.questionDraft.snappedQuestions)),\n        snappedPreviews: JSON.parse(JSON.stringify(state.questionDraft.snappedPreviews)),\n        zoomMeetings: state.questionDraft.zoomMeetings\n      };\n    },\n    // set questionDraft and creatingQuestionDetails to null\n    resetCreatingQuestion(state) {\n      state.questionDraft = {\n        type: null,\n        title: null,\n        writtenQuestion: null,\n        snappedQuestions: [],\n        snappedPreviews: [],\n        zoomMeetings: null\n      };\n      state.creatingQuestionDetails = {\n        type: null,\n        title: null,\n        writtenQuestion: null,\n        snappedQuestions: [],\n        snappedPreviews: [],\n        zoomMeetings: null\n      };\n    },\n    /* push:\n    \t* assignmentDetails.question -> questionDraft\n    \ta* ssignmentDetails.question -> creatingQuestionDetails\n    */\n    loadSavedQuestionForEdit(state, type) {\n      state.questionDraft = {\n        type: type,\n        title: JSON.parse(JSON.stringify(state.assignmentDetails.question.title)),\n        writtenQuestion: JSON.parse(JSON.stringify(state.assignmentDetails.question.writtenQuestion)),\n        snappedQuestions: JSON.parse(JSON.stringify(state.assignmentDetails.question.snappedQuestions)),\n        snappedPreviews: JSON.parse(JSON.stringify(state.assignmentDetails.question.snappedPreviews)),\n        zoomMeetings: state.assignmentDetails.question.zoomMeetings\n      };\n      state.creatingQuestionDetails = {\n        type: type,\n        title: JSON.parse(JSON.stringify(state.assignmentDetails.question.title)),\n        writtenQuestion: JSON.parse(JSON.stringify(state.assignmentDetails.question.writtenQuestion)),\n        snappedQuestions: JSON.parse(JSON.stringify(state.assignmentDetails.question.snappedQuestions)),\n        snappedPreviews: JSON.parse(JSON.stringify(state.assignmentDetails.question.snappedPreviews)),\n        zoomMeetings: state.assignmentDetails.question.zoomMeetings\n      };\n    },\n    setMeetingId(state, key) {\n      state.states.meeting_id = key;\n    },\n    // init, basically everything to null.\n    initialise(state) {\n      // STATES\n      state.states = {\n        isMain: true,\n        isCreatingQuestion: false,\n        isCreatingZoomQuestion: false,\n        isInZoomMeeting: false,\n        isSelectingDuration: false,\n        isSelectingQuestionType: false,\n        isWritingQuestion: false,\n        isSnappingQuestion: false,\n        isCroppingSnappedQuestion: false,\n        isResettingQuestion: false,\n        isShowingScheduler: false,\n        isPublishing: false,\n        isPublished: false,\n        isShowingError: false,\n        isInZoomMeeting: false,\n        isVideoOn: false,\n        isMicOn: false,\n        isScreenShare: false,\n        isRecording: false,\n        meeting_id: null\n      };\n\n      // Main details to be submitted\n      state.assignmentDetails = {\n        title: null,\n        school_id: \"\",\n        subject_id: \"\",\n        classroom_id: null,\n        due_datetime: null,\n        question: {\n          type: null,\n          title: null,\n          writtenQuestion: null,\n          snappedQuestions: [],\n          zoomeMeetings: null\n        },\n        published_at: moment()\n      };\n\n      // Questions' draft, serve as temporary save point while creating question.\n      // When draft is saved, load into assignment details\n      state.questionDraft = {\n        type: null,\n        title: null,\n        writtenQuestion: null,\n        snappedQuestions: [],\n        snappedPreviews: [],\n        zoomMeetings: null\n      };\n\n      // Currently creating question details. To be used instantaneous.\n      // When saved, load into question draft\n      state.creatingQuestionDetails = {\n        type: null,\n        title: null,\n        writtenQuestion: null,\n        snappedQuestions: [],\n        snappedPreviews: [],\n        zoomMeetings: null\n      };\n      state.selectables = {\n        schools: [],\n        subjects: [],\n        classrooms: []\n      };\n    }\n  },\n  actions: {\n    selectQuestionType(type) {\n      if (type === 'snapped') {\n        this.isSnappingQuestion = true;\n        this.isSelectingQuestionType = false;\n        this.questionDetails.type = 'snapped';\n      }\n    },\n    beginWritingQuestion({\n      state,\n      commit,\n      getters\n    }) {\n      commit('toggleWritingQuestionMode');\n      state.creatingQuestionDetails.type = 'written';\n    },\n    beginWritingZoomQuestion({\n      state,\n      commit,\n      getters\n    }) {\n      // triggered when user select zoom meeting question\n      commit('toogleZoomQuestionMode');\n      state.creatingQuestionDetails.type = 'zoom';\n    },\n    saveWrittenQuestionToDraft({\n      state,\n      commit,\n      getters\n    }) {\n      if (state.creatingQuestionDetails.writtenQuestion) {\n        commit('toggleWritingQuestionMode');\n        commit('saveQuestionToDraft');\n      } else {\n        commit('toggleShowingErrorMode');\n      }\n    },\n    endWritingQuestion({\n      state,\n      getters,\n      commit\n    }) {\n      // Exits writing question mode and return to Create/Edit question\n      // If written draft exist, reload it into creatingQuestionDetails\n      // Else, empty the creatingQuestionDetails and trigger Select Question mode\n      commit('toggleWritingQuestionMode');\n      if (state.states.isSelectingQuestionType && getters.hasWrittenQuestionDraft) {\n        state.creatingQuestionDetails.type = 'written';\n        state.creatingQuestionDetails.writtenQuestion = JSON.parse(JSON.stringify(state.questionDraft.writtenQuestion));\n      } else {\n        state.creatingQuestionDetails.writtenQuestion = '';\n        state.creatingQuestionDetails.type = null;\n      }\n    },\n    removeWrittenQuestionDraft({\n      state,\n      getters,\n      commit\n    }) {\n      commit('resetCreatingQuestion');\n    },\n    beginSnappingQuestion({\n      state,\n      getters,\n      commit\n    }) {\n      if (!state.states.isSnappingQuestion) {\n        commit('toggleSnappingQuestionMode');\n        state.creatingQuestionDetails.type = 'snapped';\n      }\n    },\n    handleSnapQuestion({\n      state,\n      getters,\n      commit,\n      dispatch\n    }, e) {\n      let files = e.target.files || e.dataTransfer.files;\n      if (!files.length) {\n        return;\n      }\n      let fileList = Array.prototype.slice.call(e.target.files);\n      fileList.forEach(f => {\n        if (!f.type.match(\"image.*\")) {\n          return;\n        }\n        let reader = new FileReader();\n        reader.onload = e => {\n          state.creatingQuestionDetails.snappedQuestions.push(e.target.result);\n          state.creatingQuestionDetails.snappedPreviews.push({\n            source: e.target.result,\n            preview: false,\n            cropping: false\n          });\n        };\n        reader.readAsDataURL(f);\n      });\n    },\n    saveCroppedSnappedQuestion({\n      state,\n      commit\n    }, payload) {\n      state.creatingQuestionDetails.snappedPreviews[payload.key].source = payload.dataURL;\n      state.creatingQuestionDetails.snappedQuestions[payload.key] = payload.dataURL;\n      commit('toggleCroppingSnappedQuestionMode', payload.key);\n    },\n    removeSnappedQuestion({\n      state,\n      commit\n    }, key) {\n      state.creatingQuestionDetails.snappedQuestions.splice(key, 1);\n      state.creatingQuestionDetails.snappedPreviews.splice(key, 1);\n      if (!state.creatingQuestionDetails.snappedQuestions.length) {\n        commit('resetCreatingQuestion');\n        commit('toggleSnappingQuestionMode');\n      }\n    },\n    handleZoomQuestion({\n      state,\n      commit\n    }, payload) {\n      // handled when recording stops\n      // payload should be the zoom recording file in blob\n      console.log('trigger when new video stored');\n      state.creatingQuestionDetails.zoomMeetings = payload;\n      console.log('payload', payload);\n    },\n    saveZoomQuestionToDraf({\n      state,\n      commit\n    }) {\n      //pushing questionDetails.zoomMeetings to assignmentDetails.question\n      console.log('saving zoom question draf');\n      commit('saveQuestionToDraft');\n      if (state.creatingQuestionDetails.zoomMeetings) {\n        commit('toogleZoomQuestionMode');\n      } else {\n        commit('toggleShowingErrorMode');\n      }\n    },\n    closeToggleDuration() {\n      // MODE: MODAL\n      if (this.durationDay === '') {\n        this.durationDay = 0;\n      }\n      if (this.durationHour === '') {\n        this.durationHour = 0;\n      }\n      if (this.durationMinute === '') {\n        this.durationMinute = 0;\n      }\n      this.toggleDuration = !this.toggleDuration;\n    },\n    getSchools({\n      state\n    }) {\n      TeacherRepository.getTeacherSchools().then(res => {\n        console.log('res', res.data);\n        res.data.forEach(item => {\n          state.selectables.schools.push({\n            id: item.id,\n            name: item.name\n          });\n        });\n        // update state.selectables.schools\n      });\n    },\n\n    getSubjects({\n      state\n    }) {\n      TeacherRepository.getTeacherSubjects().then(response => {\n        if (response.data.success) {\n          const data = response.data.data;\n          const numOfSubjects = data.length;\n          for (let i = 0; i < numOfSubjects; i++) {\n            let item = data[i];\n            let subjectDetail = {\n              id: item.subject_id,\n              name: item.subject_name\n            };\n            state.selectables.subjects.push(subjectDetail);\n          }\n        }\n      });\n    },\n    getClasses({\n      state,\n      commit\n    }) {\n      TeacherRepository.getTeacherClasses().then(response => {\n        if (response.data.success) {\n          const data = response.data.data;\n          for (let i = 0; i < data.length; i++) {\n            let item = data[i];\n            let classDetail = {\n              id: item.class_id,\n              name: item.class_name,\n              numOfStudents: item.num_of_students,\n              isHomeroom: item.homeroom\n            };\n            state.selectables.classrooms.push(classDetail);\n          }\n        }\n      });\n    },\n    // updateShowManualDescription() {\n    //   this.showDescription = !this.showDescription\n    //   this.isCreatingQuestion = !this.isCreatingQuestion;\n    // },\n    handleQuestionDetails(details) {\n      this.questionDetails = details;\n    },\n    saveQuestion({\n      state,\n      getters,\n      commit\n    }) {\n      // Check if user selected a type of question\n      if (state.creatingQuestionDetails.type) {\n        // Check if user has inserted a question title\n        if (state.creatingQuestionDetails.title) {\n          // If user opt to Write Question\n          if (getters.creatingQuestionType === 'written') {\n            if (getters.hasWrittenQuestionDraft) {\n              commit('saveQuestionToAssignmentDetails');\n              commit('resetCreatingQuestion');\n              commit('toggleCreatingQuestionMode');\n            } else {\n              console.log('please write something');\n            }\n          }\n\n          // If user opt to Snap Question\n          if (getters.creatingQuestionType === 'snapped') {\n            commit('saveQuestionToDraft');\n            if (getters.hasSnappedQuestionDraft) {\n              commit('saveQuestionToAssignmentDetails');\n              commit('resetCreatingQuestion');\n              commit('toggleCreatingQuestionMode');\n            } else {\n              console.log('please snap something');\n            }\n          }\n\n          // if user opt to zoom question\n          if (getters.creatingQuestionType === 'zoom') {\n            console.log('saving zoom question');\n            commit('saveQuestionToDraft');\n            if (getters.hasZoomQuestionDraf) {\n              commit('saveQuestionToAssignmentDetails');\n              commit('resetCreatingQuestion');\n              commit('toggleCreatingQuestionMode');\n            } else {\n              console.log('please record something');\n            }\n\n            // plan. sanitize and push to server\n          }\n        } else {\n          console.log('please fill in title');\n        }\n      } else {\n        console.log('Please select a type of question.');\n      }\n    },\n    editSavedQuestion({\n      state,\n      commit,\n      getters\n    }) {\n      let type = getters.savedQuestionType;\n      commit('beginEditingQuestionMode', type);\n      commit('loadSavedQuestionForEdit', type);\n    },\n    cancelCreatingQuestion({\n      state,\n      commit,\n      type\n    }) {\n      if (!getters.hasSavedQuestion) {\n        commit('resetCreatingQuestion');\n      }\n      commit('cancelCreatingQuestionMode');\n    },\n    checkForm({\n      state,\n      commit,\n      getters\n    }) {\n      // Reset error\n      state.errors = [];\n      if (!state.assignmentDetails.title) {\n        state.errors.push('Title required.');\n      }\n      if (!state.assignmentDetails.subject_id) {\n        state.errors.push('Subject required.');\n      }\n      if (!state.assignmentDetails.classroom_id) {\n        state.errors.push('Classroom required.');\n      }\n      if (!getters.hasSavedQuestion) {\n        state.errors.push('Question required.');\n      }\n      if (!state.assignmentDetails.due_datetime) {\n        state.errors.push('Due date required');\n      }\n      if (state.errors.length) {\n        commit('toggleShowingErrorMode');\n      }\n    },\n    async sendData({\n      state,\n      commit,\n      getters,\n      dispatch\n    }) {\n      // send data to the server\n\n      dispatch('checkForm');\n      if (!getters.hasErrors) {\n        let counter = 0;\n        let zoom_meeting = null;\n        if (state.states.isShowingScheduler) {\n          commit('toggleShowingSchedulerMode');\n        }\n        commit('togglePublishingMode');\n        commit('toggleShowingSchedulerMode');\n\n        // from lavarel code, it seems push the video to the server first and to get meeting\n        // and then push the assignment  details\n\n        // pre-flight check: see if it's a zoom meeting video.\n        // if it's a zoom meeting, upload the video first and update assignment details\n        console.log('check if got zoom video');\n        if (state.assignmentDetails.question.type === 'zoom') {\n          let formData = new FormData();\n          const path = '/zoom-meeting/push_s3';\n          let recUrl = state.assignmentDetails.question.zoomMeetings;\n          console.log('recovering video from ', recUrl);\n          console.log('getting the video file');\n          let recBlob = await fetch(recUrl).then(r => r.blob()).then(blobFile => new File([blobFile], \"test.webm\", {\n            type: \"video/webm\"\n          }));\n          formData.append('zoomMeetings', recBlob);\n          await Repository.post(path, formData, {\n            headers: {\n              'Content-Type': 'multipart/form-data'\n            }\n          }).then(res => {\n            zoom_meeting = res.data.zoom_meeting;\n            console.log('res', res);\n          });\n        }\n        console.log('done sending a zoom video', zoom_meeting);\n        console.log('pushing the assignment detail');\n        // push the assignment details for each class.\n        state.assignmentDetails.classroom_id.forEach((classroom, index) => {\n          let formData = new FormData();\n          formData.append('subject_id', state.assignmentDetails.subject_id);\n          formData.append('school_id', state.assignmentDetails.school_id);\n          formData.append('class_id', classroom.id);\n          formData.append('title', state.assignmentDetails.title);\n          formData.append('written_question_title', state.assignmentDetails.question.title);\n          formData.append('written_description', state.assignmentDetails.question.writtenQuestion ?? '');\n          formData.append('due_datetime', moment(state.assignmentDetails.due_datetime).format('YYYY-MM-DD HH:mm:ss'));\n          formData.append('published_at', moment(state.assignmentDetails.published_at).format('YYYY-MM-DD HH:mm:ss'));\n          formData.append('remarks', state.assignmentDetails.remarks ?? '');\n          formData.append('recording_meeting_id', zoom_meeting ? zoom_meeting.meeting_id : '');\n          for (let i = 0; i < state.assignmentDetails.question.snappedQuestions.length; i++) {\n            let file = state.assignmentDetails.question.snappedQuestions[i];\n            formData.append('snap_question[' + i + ']', file);\n          }\n\n          // the part where actually save the assignment\n          Repository.post('/assignments/store', formData, {\n            headers: {\n              'Content-Type': 'multipart/form-data'\n            }\n          }).then(response => {\n            if (response.data.success) {\n              counter++;\n              if (counter === state.assignmentDetails.classroom_id.length) {\n                commit('togglePublishingMode');\n                commit('togglePublishedMode');\n              }\n            } else {\n              counter++;\n              if (counter === state.assignmentDetails.classroom_id.length) {\n                commit('toggleShowingErrorMode');\n              }\n            }\n          }).catch(error => {\n            commit('togglePublishingMode');\n            commit('toggleShowingErrorMode');\n          });\n        });\n        console.log('done sending the assignment to db');\n      }\n    },\n    testRecordMeeting({\n      state,\n      commit\n    }) {\n      // test the past where posting to '/zoom-meeting/store'\n      //const host = 'https://admin.gotsnapped.tech/api';\n      const host = 'http://localhost:8000/api';\n      const path = '/zoom-meeting/store';\n      const topic = \"test meeting\";\n      let formData = new FormData();\n      formData.append('topic', topic);\n      formData.append('agenda', topic);\n      formData.append('duration', '5');\n      formData.append('host_video', '1');\n      formData.append('participant_video', '1');\n      Repository.post(path, formData).then(res => {\n        console.log('response', res);\n        console.log('data', res.data.data);\n        console.log('meetind_id', res.data.data.id);\n        commit('setMeetingId', res.data.data.id);\n        console.log('meeting_url', res.data.data.join_url);\n      });\n    },\n    testGetMeetingRecordings({\n      state\n    }) {\n      // retrive meeting recordings from state.states.meeting_id\n      console.log('meeting_id is ', state.states.meeting_id);\n      if (state.states.meeting_id) {\n        const path = '/zoom-meeting/' + state.states.meeting_id + '/recordings';\n        console.log('getting recordings from ', path);\n        Repository.get(path).then(res => {\n          console.log('res', res);\n        });\n      }\n    },\n    async testSendRecordings({\n      state\n    }) {\n      console.log('in testSendRecordings');\n      const path = '/zoom-meeting/push_s3';\n\n      /*\n      \tplan:-\n      \tfor testing, see if i can push the file contents from\n      \t\tquestionDetails.zoomMeetings to the server and eventually to s3.\n      */\n\n      //validation, ensure the zoomMeetings is populated\n      /*\n      if(!state.assignmentDetails.zoomMeetings){\n      \tconsole.log('plese record a video');\n      }\n      */\n\n      // build up formData\n      let formData = new FormData();\n      let recUrl = state.creatingQuestionDetails.zoomMeetings;\n      let recBlob = await fetch(recUrl).then(r => r.blob()).then(blobFile => new File([blobFile], \"test.webm\", {\n        type: \"video/webm\"\n      }));\n      formData.append('zoomMeetings', recBlob);\n      Repository.post(path, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      }).then(res => {\n        console.log('res', res);\n      });\n    },\n    getDetails: function () {\n      TeacherRepository.getTeacherDetails().then(response => {\n        if (response.data.success) {\n          const data = response.data.data[0];\n          let teacherDetail = {\n            id: data.id\n          };\n          localStorage.setItem('teacherID', teacherDetail.id);\n        }\n      });\n    },\n    setAssignmentTitle({\n      state\n    }, maxedTitle) {\n      state.assignmentDetails.title = maxedTitle;\n    }\n  },\n  getters: {\n    creatingQuestionType: state => {\n      return state.creatingQuestionDetails.type;\n    },\n    savedQuestionType: state => {\n      return state.assignmentDetails.question.type;\n    },\n    dueDateTime(state) {\n      return moment(state.assignmentDetails.due_datetime).format('DD/MM/YYYY');\n    },\n    snappedPreviews(state) {\n      return state.assignmentDetails.question.snappedQuestions;\n    },\n    hasSavedQuestion: state => {\n      return state.assignmentDetails.question.type && (state.assignmentDetails.question.writtenQuestion || state.assignmentDetails.question.snappedQuestions.length || state.assignmentDetails.question.zoomMeetings !== null);\n    },\n    hasSavedDueDatetime: state => {\n      return state.assignmentDetails.due_datetime !== null;\n    },\n    hasEditableQuestion(state, getters) {\n      return state.states.isCreatingQuestion && !state.states.isWritingQuestion && (getters.hasWrittenQuestionDraft || getters.hasSnappedQuestionDraft);\n    },\n    hasWrittenQuestionDraft: state => {\n      return state.questionDraft.type ? state.questionDraft.type === 'written' && state.questionDraft.writtenQuestion : false;\n    },\n    hasSnappedQuestionDraft(state) {\n      return state.questionDraft.type ? state.questionDraft.type === 'snapped' && state.questionDraft.snappedQuestions.length > 0 : false;\n    },\n    hasZoomQuestionDraf(state) {\n      return state.questionDraft.type ? state.questionDraft.type === 'zoom' && state.questionDraft.zoomMeetings !== null : false;\n    },\n    hasErrors(state) {\n      return state.errors.length || state.states.isShowingError;\n    },\n    hasZoomMeeting(state) {\n      return state.states.isInZoomMeeting;\n    },\n    hasZoomVideo(state) {\n      return state.states.isVideoOn;\n    },\n    hasZoomMic(state) {\n      return state.states.isMicOn;\n    },\n    hasZoomScreenShare(state) {\n      return state.states.isScreenShare;\n    },\n    hasZoomRecording(state) {\n      return state.states.isRecording;\n    }\n  }\n};","map":{"version":3,"names":["TeacherRepository","moment","Repository","getters","get","namespaced","state","states","isMain","isCreatingQuestion","isCreatingZoomQuestion","isSelectingDuration","isSelectingQuestionType","isWritingQuestion","isSnappingQuestion","isZoomQuestion","isCroppingSnappedQuestion","isResettingQuestion","isShowingScheduler","isPublishing","isPublished","isShowingError","isInZoomMeeting","isVideoOn","isMicOn","isRecording","isScreenShare","meeting_id","assignmentDetails","title","school_id","subject_id","classroom_id","due_datetime","question","type","writtenQuestion","snappedQuestions","snappedPreviews","zoomMeetings","published_at","questionDraft","creatingQuestionDetails","selectables","schools","subjects","classrooms","errors","mutations","toggleCreatingQuestionMode","cancelCreatingQuestionMode","beginEditingQuestionMode","savedQuestionType","isEditingQuestion","beginEditingWrittenQuestionMode","toggleSelectingDurationMode","toggleWritingQuestionMode","toogleZoomQuestionMode","toggleSnappingQuestionMode","toggleShowingErrorMode","toggleShowingSchedulerMode","togglePublishingMode","togglePublishedMode","toggleIsSelectingDuration","toggleIsInZoomMeeting","toggleSnappedQuestionPreviewStatus","key","preview","cropping","toggleCroppingSnappedQuestionMode","toggleVideo","console","log","toggleMic","toggleShareScreen","toggleRecording","saveQuestionToDraft","JSON","parse","stringify","saveQuestionToAssignmentDetails","resetCreatingQuestion","loadSavedQuestionForEdit","setMeetingId","initialise","zoomeMeetings","actions","selectQuestionType","questionDetails","beginWritingQuestion","commit","beginWritingZoomQuestion","saveWrittenQuestionToDraft","endWritingQuestion","hasWrittenQuestionDraft","removeWrittenQuestionDraft","beginSnappingQuestion","handleSnapQuestion","dispatch","e","files","target","dataTransfer","length","fileList","Array","prototype","slice","call","forEach","f","match","reader","FileReader","onload","push","result","source","readAsDataURL","saveCroppedSnappedQuestion","payload","dataURL","removeSnappedQuestion","splice","handleZoomQuestion","saveZoomQuestionToDraf","closeToggleDuration","durationDay","durationHour","durationMinute","toggleDuration","getSchools","getTeacherSchools","then","res","data","item","id","name","getSubjects","getTeacherSubjects","response","success","numOfSubjects","i","subjectDetail","subject_name","getClasses","getTeacherClasses","classDetail","class_id","class_name","numOfStudents","num_of_students","isHomeroom","homeroom","handleQuestionDetails","details","saveQuestion","creatingQuestionType","hasSnappedQuestionDraft","hasZoomQuestionDraf","editSavedQuestion","cancelCreatingQuestion","hasSavedQuestion","checkForm","sendData","hasErrors","counter","zoom_meeting","formData","FormData","path","recUrl","recBlob","fetch","r","blob","blobFile","File","append","post","headers","classroom","index","format","remarks","file","catch","error","testRecordMeeting","host","topic","join_url","testGetMeetingRecordings","testSendRecordings","getDetails","getTeacherDetails","teacherDetail","localStorage","setItem","setAssignmentTitle","maxedTitle","dueDateTime","hasSavedDueDatetime","hasEditableQuestion","hasZoomMeeting","hasZoomVideo","hasZoomMic","hasZoomScreenShare","hasZoomRecording"],"sources":["/Users/erwinkarim/Websites/Snapped/snapped-mobile-master/src/store/modules/teacherCreateAssignment.js"],"sourcesContent":["import TeacherRepository from \"@/repositories/TeacherRepository\";\nimport moment from \"moment\";\nimport Repository from \"@/repositories/Repository\";\nimport getters from \"@/store/getters\";\nimport {get} from \"v-calendar/src/utils/_\";\n\n/*\n\tstate to handle assignment creations\n\t1. question creation\n\tthe gist is ;-\n\tcreation question => creatingQuestionDetails\n\n\twhen press 'save' (in CreateQuestionForm.vue)\n\t* save<XXX>ToDraf\n\t\t* creatingQuestionDetails => questionDraft\n\n\twhen press 'save' again (in TeacherAssignments/Create/Index.vue)\n\t* calls saveQuestion\n\t\t* questionDraft => assignmentDetails.question\n\t\t* questionDraft is cleared\n\t\t* change the state from isCreatingQuestion to isWritingQuestion\n\n\twhen press publish\n\t* sendData is called to push the question to the server/db\n*/\nexport default {\n\tnamespaced: true,\n\tstate: () => ({\n\t\t// STATES\n\t\tstates: {\n\t\t\tisMain: true,\n\t\t\tisCreatingQuestion: false,\n\t\t\tisCreatingZoomQuestion: false,\n\t\t\tisSelectingDuration: false,\n\t\t\tisSelectingQuestionType: false,\n\t\t\tisWritingQuestion: false,\n\t\t\tisSnappingQuestion: false,\n\t\t\tisZoomQuestion: false,\n\t\t\tisCroppingSnappedQuestion: false,\n\t\t\tisResettingQuestion: false,\n\t\t\tisShowingScheduler: false,\n\t\t\tisPublishing: false,\n\t\t\tisPublished: false,\n\t\t\tisShowingError: false,\n\t\t\tisInZoomMeeting: false,\n\t\t\tisVideoOn: false,\n\t\t\tisMicOn: false,\n\t\t\tisRecording: false,\n\t\t\tisScreenShare: false,\n\t\t\tmeeting_id: null,\n\t\t},\n\n\t\t// Main details to be submitted\n\t\tassignmentDetails: {\n\t\t\ttitle: null,\n\t\t\tschool_id: \"\",\n\t\t\tsubject_id: \"\",\n\t\t\tclassroom_id: null,\n\t\t\tdue_datetime: null,\n\t\t\tquestion: {\n\t\t\t\ttype: null,\n\t\t\t\ttitle: null,\n\t\t\t\twrittenQuestion: null,\n\t\t\t\tsnappedQuestions: [],\n\t\t\t\tsnappedPreviews: [],\n\t\t\t\tzoomMeetings: null\n\t\t\t},\n\t\t\tpublished_at: moment(),\n\t\t},\n\n\t\t// Questions' draft, serve as temporary save point while creating question.\n\t\t// When draft is saved, load into assignment details\n\t\tquestionDraft: {\n\t\t\ttype: null,\n\t\t\ttitle: null,\n\t\t\twrittenQuestion: null,\n\t\t\tsnappedQuestions: [],\n\t\t\tsnappedPreviews: [],\n\t\t\tzoomMeetings: null,\n\t\t},\n\n\t\t// Currently creating question details. To be used instantaneous.\n\t\t// When saved, load into question draft\n\t\tcreatingQuestionDetails: {\n\t\t\ttype: null,\n\t\t\ttitle: null,\n\t\t\twrittenQuestion: null,\n\t\t\tsnappedQuestions: [],\n\t\t\tsnappedPreviews: [],\n\t\t\tzoomMeetings: null,\n\t\t},\n\n\t\tselectables: {\n\t\t\tschools: [],\n\t\t\tsubjects: [],\n\t\t\tclassrooms: []\n\t\t},\n\n\t\terrors: []\n\t}),\n\tmutations: {\n\t\t\ttoggleCreatingQuestionMode(state) {\n\n\t\t\t\t\tstate.states.isMain = !state.states.isMain;\n\t\t\t\t\tstate.states.isCreatingQuestion = !state.states.isCreatingQuestion;\n\t\t\t\t\tstate.states.isSelectingQuestionType = !state.states.isSelectingQuestionType;\n\t\t\t},\n\n\t\t\tcancelCreatingQuestionMode(state) {\n\t\t\t\t\tstate.states.isMain = true;\n\t\t\t\t\tstate.states.isCreatingQuestion = false;\n\t\t\t\t\tstate.states.isCreatingZoomQuestion = false;\n\t\t\t\t\tstate.states.isSelectingQuestionType = false;\n\t\t\t\t\tstate.states.isWritingQuestion = false;\n\t\t\t\t\tstate.states.isSnappingQuestion = false;\n\t\t\t\t\tstate.states.isZoomQuestion = false;\n\t\t\t},\n\n\t\t\tbeginEditingQuestionMode(state, savedQuestionType) {\n\t\t\t\t\tstate.states.isMain = false;\n\t\t\t\t\tstate.states.isCreatingQuestion = true;\n\t\t\t\t\tstate.states.isSelectingQuestionType = false;\n\t\t\t\t\tstate.states.isEditingQuestion = true;\n\n\t\t\t\t\tstate.states.isSnappingQuestion = savedQuestionType === 'snapped';\n\t\t\t\t\tstate.states.isZoomQuestion = savedQuestionType === 'zoom';\n\t\t\t},\n\n\t\t\tbeginEditingWrittenQuestionMode(state){\n\t\t\t\t\tstate.states.isSelectingQuestionType = false;\n\t\t\t\t\tstate.states.isWritingQuestion = true;\n\t\t\t},\n\n\t\t\ttoggleSelectingDurationMode(state) {\n\t\t\t\t\tstate.states.isSelectingDuration = !state.states.isSelectingDuration\n\t\t\t},\n\n\t\t\ttoggleWritingQuestionMode(state) {\n\t\t\t\t\tstate.states.isSelectingQuestionType = !state.states.isSelectingQuestionType;\n\t\t\t\t\tstate.states.isWritingQuestion = !state.states.isWritingQuestion;\n\t\t\t},\n\n\t\t\ttoogleZoomQuestionMode(state) {\n\t\t\t\tstate.states.isSelectingQuestionType = !state.states.isSelectingQuestionType;\n\t\t\t\tstate.states.isCreatingZoomQuestion = !state.states.isCreatingZoomQuestion;\n\t\t\t},\n\n\t\t\ttoggleSnappingQuestionMode(state) {\n\t\t\t\t\tstate.states.isSelectingQuestionType = !state.states.isSelectingQuestionType;\n\t\t\t\t\tstate.states.isSnappingQuestion = !state.states.isSnappingQuestion;\n\t\t\t},\n\n\t\t\ttoggleShowingErrorMode(state) {\n\t\t\t\t\tstate.states.isShowingError = !state.states.isShowingError;\n\t\t\t},\n\n\t\t\ttoggleShowingSchedulerMode(state) {\n\t\t\t\t\tstate.states.isShowingScheduler = !state.states.isShowingScheduler\n\t\t\t},\n\n\t\t\ttogglePublishingMode(state) {\n\t\t\t\t\tstate.states.isPublishing = !state.states.isPublishing\n\t\t\t},\n\n\t\t\ttogglePublishedMode(state) {\n\t\t\t\t\tstate.states.isPublished = !state.states.isPublished\n\t\t\t},\n\n\t\t\ttoggleIsSelectingDuration(state) {\n\t\t\t\t\tstate.states.isSelectingDuration = !state.states.isSelectingDuration;\n\t\t\t},\n\n\t\t\ttoggleIsInZoomMeeting(state) {\n\t\t\t\tstate.states.isInZoomMeeting = !state.states.isInZoomMeeting;\n\n\t\t\t},\n\n\t\t\ttoggleSnappedQuestionPreviewStatus(state, key) {\n\t\t\t\t\tstate.creatingQuestionDetails.snappedPreviews[key].preview = !state.creatingQuestionDetails.snappedPreviews[key].preview;\n\t\t\t\t\tstate.creatingQuestionDetails.snappedPreviews[key].cropping = false;\n\t\t\t},\n\n\t\t\ttoggleCroppingSnappedQuestionMode(state, key) {\n\t\t\t\t\tstate.creatingQuestionDetails.snappedPreviews[key].preview = !state.creatingQuestionDetails.snappedPreviews[key].preview;\n\t\t\t\t\tstate.creatingQuestionDetails.snappedPreviews[key].cropping = !state.creatingQuestionDetails.snappedPreviews[key].cropping;\n\t\t\t},\n\n\t\t\ttoggleVideo(state) {\n\t\t\t\tstate.states.isVideoOn = !state.states.isVideoOn;\n\t\t\t\tconsole.log('inside toggleVideo fn', state.states.isVideoOn);\n\t\t\t},\n\n\t\t\ttoggleMic(state) {\n\t\t\t\tstate.states.isMicOn = !state.states.isMicOn;\n\t\t\t\tconsole.log('toogle mic button');\n\t\t\t},\n\n\t\t\ttoggleShareScreen(state) {\n\t\t\t\tstate.states.isScreenShare = !state.states.isScreenShare;\n\t\t\t\tconsole.log('inside toggleShareScreen fn', state.states.isScreenShare);\n\t\t\t},\n\n\t\t\ttoggleRecording(state) {\n\t\t\t\t\tstate.states.isRecording = !state.states.isRecording;\n\t\t\t},\n\n\t\t\t// push creatingQuestionsDetails -> questionDraft\n\t\t\tsaveQuestionToDraft(state) {\n\t\t\t\tconsole.log('creatingQuestionDetails.zoomMeetings', state.creatingQuestionDetails.zoomMeetings);\n\t\t\t\t\tstate.questionDraft = {\n\t\t\t\t\t\t\ttype: JSON.parse(JSON.stringify(state.creatingQuestionDetails.type)),\n\t\t\t\t\t\t\ttitle: JSON.parse(JSON.stringify(state.creatingQuestionDetails.title)),\n\t\t\t\t\t\t\twrittenQuestion: JSON.parse(JSON.stringify(state.creatingQuestionDetails.writtenQuestion)),\n\t\t\t\t\t\t\tsnappedQuestions: JSON.parse(JSON.stringify(state.creatingQuestionDetails.snappedQuestions)),\n\t\t\t\t\t\t\tsnappedPreviews: JSON.parse(JSON.stringify(state.creatingQuestionDetails.snappedPreviews)),\n\t\t\t\t\t\t\tzoomMeetings: state.creatingQuestionDetails.zoomMeetings,\n\t\t\t\t\t}\n\t\t\t},\n\n\t\t\t// push questionDraft -> assignmentDetails.question\n\t\t\tsaveQuestionToAssignmentDetails(state) {\n\t\t\t\t\tstate.assignmentDetails.question = {\n\t\t\t\t\t\t\ttype: JSON.parse(JSON.stringify(state.questionDraft.type)),\n\t\t\t\t\t\t\ttitle: JSON.parse(JSON.stringify(state.questionDraft.title)),\n\t\t\t\t\t\t\twrittenQuestion: JSON.parse(JSON.stringify(state.questionDraft.writtenQuestion)),\n\t\t\t\t\t\t\tsnappedQuestions: JSON.parse(JSON.stringify(state.questionDraft.snappedQuestions)),\n\t\t\t\t\t\t\tsnappedPreviews: JSON.parse(JSON.stringify(state.questionDraft.snappedPreviews)),\n\t\t\t\t\t\t\tzoomMeetings: state.questionDraft.zoomMeetings,\n\t\t\t\t\t}\n\t\t\t},\n\n\t\t\t// set questionDraft and creatingQuestionDetails to null\n\t\t\tresetCreatingQuestion(state) {\n\n\t\t\t\t\tstate.questionDraft = {\n\t\t\t\t\t\t\ttype: null,\n\t\t\t\t\t\t\ttitle: null,\n\t\t\t\t\t\t\twrittenQuestion: null,\n\t\t\t\t\t\t\tsnappedQuestions: [],\n\t\t\t\t\t\t\tsnappedPreviews: [],\n\t\t\t\t\t\t\tzoomMeetings: null\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.creatingQuestionDetails = {\n\t\t\t\t\t\t\ttype: null,\n\t\t\t\t\t\t\ttitle: null,\n\t\t\t\t\t\t\twrittenQuestion: null,\n\t\t\t\t\t\t\tsnappedQuestions: [],\n\t\t\t\t\t\t\tsnappedPreviews: [],\n\t\t\t\t\t\t\tzoomMeetings: null\n\t\t\t\t\t}\n\t\t\t},\n\n\t\t\t/* push:\n\t\t\t\t* assignmentDetails.question -> questionDraft\n\t\t\t\ta* ssignmentDetails.question -> creatingQuestionDetails\n\t\t\t*/\n\t\t\tloadSavedQuestionForEdit(state, type) {\n\n\t\t\t\t\tstate.questionDraft = {\n\t\t\t\t\t\t\ttype: type,\n\t\t\t\t\t\t\ttitle: JSON.parse(JSON.stringify(state.assignmentDetails.question.title)),\n\t\t\t\t\t\t\twrittenQuestion: JSON.parse(JSON.stringify(state.assignmentDetails.question.writtenQuestion)),\n\t\t\t\t\t\t\tsnappedQuestions: JSON.parse(JSON.stringify(state.assignmentDetails.question.snappedQuestions)),\n\t\t\t\t\t\t\tsnappedPreviews: JSON.parse(JSON.stringify(state.assignmentDetails.question.snappedPreviews)),\n\t\t\t\t\t\t\tzoomMeetings: state.assignmentDetails.question.zoomMeetings,\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.creatingQuestionDetails = {\n\t\t\t\t\t\t\ttype: type,\n\t\t\t\t\t\t\ttitle: JSON.parse(JSON.stringify(state.assignmentDetails.question.title)),\n\t\t\t\t\t\t\twrittenQuestion: JSON.parse(JSON.stringify(state.assignmentDetails.question.writtenQuestion)),\n\t\t\t\t\t\t\tsnappedQuestions: JSON.parse(JSON.stringify(state.assignmentDetails.question.snappedQuestions)),\n\t\t\t\t\t\t\tsnappedPreviews: JSON.parse(JSON.stringify(state.assignmentDetails.question.snappedPreviews)),\n\t\t\t\t\t\t\tzoomMeetings: state.assignmentDetails.question.zoomMeetings,\n\t\t\t\t\t}\n\t\t\t},\n\n\n\t\t\tsetMeetingId(state, key) {\n\t\t\t\tstate.states.meeting_id = key;\n\t\t\t},\n\n\t\t\t// init, basically everything to null.\n\t\t\tinitialise(state) {\n\n\t\t\t\t\t// STATES\n\t\t\t\t\tstate.states = {\n\t\t\t\t\t\t\tisMain: true,\n\t\t\t\t\t\t\tisCreatingQuestion: false,\n\t\t\t\t\t\t\tisCreatingZoomQuestion: false,\n\t\t\t\t\t\t\tisInZoomMeeting: false,\n\t\t\t\t\t\t\tisSelectingDuration: false,\n\t\t\t\t\t\t\tisSelectingQuestionType: false,\n\t\t\t\t\t\t\tisWritingQuestion: false,\n\t\t\t\t\t\t\tisSnappingQuestion: false,\n\t\t\t\t\t\t\tisCroppingSnappedQuestion: false,\n\t\t\t\t\t\t\tisResettingQuestion: false,\n\t\t\t\t\t\t\tisShowingScheduler: false,\n\t\t\t\t\t\t\tisPublishing: false,\n\t\t\t\t\t\t\tisPublished: false,\n\t\t\t\t\t\t\tisShowingError: false,\n\t\t\t\t\t\t\tisInZoomMeeting: false,\n\t\t\t\t\t\t\tisVideoOn: false,\n\t\t\t\t\t\t\tisMicOn: false,\n\t\t\t\t\t\t\tisScreenShare: false,\n\t\t\t\t\t\t\tisRecording: false,\n\t\t\t\t\t\t\tmeeting_id: null,\n\t\t\t\t\t};\n\n\t\t\t\t\t// Main details to be submitted\n\t\t\t\t\tstate.assignmentDetails = {\n\t\t\t\t\t\t\ttitle: null,\n\t\t\t\t\t\t\tschool_id: \"\",\n\t\t\t\t\t\t\tsubject_id: \"\",\n\t\t\t\t\t\t\tclassroom_id: null,\n\t\t\t\t\t\t\tdue_datetime: null,\n\t\t\t\t\t\t\tquestion: {\n\t\t\t\t\t\t\t\t\ttype: null,\n\t\t\t\t\t\t\t\t\ttitle: null,\n\t\t\t\t\t\t\t\t\twrittenQuestion: null,\n\t\t\t\t\t\t\t\t\tsnappedQuestions: [],\n\t\t\t\t\t\t\t\t\tzoomeMeetings: null\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tpublished_at: moment(),\n\t\t\t\t\t}\n\n\t\t\t\t\t// Questions' draft, serve as temporary save point while creating question.\n\t\t\t\t\t// When draft is saved, load into assignment details\n\t\t\t\t\tstate.questionDraft = {\n\t\t\t\t\t\t\ttype: null,\n\t\t\t\t\t\t\ttitle: null,\n\t\t\t\t\t\t\twrittenQuestion: null,\n\t\t\t\t\t\t\tsnappedQuestions: [],\n\t\t\t\t\t\t\tsnappedPreviews: [],\n\t\t\t\t\t\t\tzoomMeetings: null\n\t\t\t\t\t}\n\n\t\t\t\t\t// Currently creating question details. To be used instantaneous.\n\t\t\t\t\t// When saved, load into question draft\n\t\t\t\t\tstate.creatingQuestionDetails = {\n\t\t\t\t\t\t\ttype: null,\n\t\t\t\t\t\t\ttitle: null,\n\t\t\t\t\t\t\twrittenQuestion: null,\n\t\t\t\t\t\t\tsnappedQuestions: [],\n\t\t\t\t\t\t\tsnappedPreviews: [],\n\t\t\t\t\t\t\tzoomMeetings: null,\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.selectables = {\n\t\t\t\t\t\tschools:[],\n\t\t\t\t\t\tsubjects: [],\n\t\t\t\t\t\tclassrooms: []\n\t\t\t\t\t}\n\t\t\t}\n\n\t},\n\tactions: {\n\t\tselectQuestionType(type) {\n\t\t\t\tif (type === 'snapped') {\n\t\t\t\t\t\tthis.isSnappingQuestion = true;\n\t\t\t\t\t\tthis.isSelectingQuestionType = false;\n\t\t\t\t\t\tthis.questionDetails.type = 'snapped';\n\t\t\t\t}\n\t\t},\n\t\tbeginWritingQuestion({state, commit, getters}) {\n\t\t\tcommit('toggleWritingQuestionMode')\n\t\t\tstate.creatingQuestionDetails.type = 'written';\n\t\t},\n\t\tbeginWritingZoomQuestion({state, commit, getters}) {\n\t\t\t// triggered when user select zoom meeting question\n\t\t\tcommit('toogleZoomQuestionMode');\n\t\t\tstate.creatingQuestionDetails.type ='zoom';\n\t\t},\n\t\tsaveWrittenQuestionToDraft({state, commit, getters}) {\n\t\t\tif (state.creatingQuestionDetails.writtenQuestion) {\n\t\t\t\tcommit('toggleWritingQuestionMode')\n\t\t\t\tcommit('saveQuestionToDraft')\n\t\t\t} else {\n\t\t\t\tcommit('toggleShowingErrorMode')\n\t\t\t}\n\t\t},\n\t\tendWritingQuestion({state, getters, commit}) {\n\t\t\t// Exits writing question mode and return to Create/Edit question\n\t\t\t// If written draft exist, reload it into creatingQuestionDetails\n\t\t\t// Else, empty the creatingQuestionDetails and trigger Select Question mode\n\t\t\tcommit('toggleWritingQuestionMode')\n\t\t\tif (state.states.isSelectingQuestionType && getters.hasWrittenQuestionDraft) {\n\t\t\t\tstate.creatingQuestionDetails.type = 'written';\n\t\t\t\tstate.creatingQuestionDetails.writtenQuestion = JSON.parse(JSON.stringify(state.questionDraft.writtenQuestion))\n\t\t\t} else {\n\t\t\t\tstate.creatingQuestionDetails.writtenQuestion = '';\n\t\t\t\tstate.creatingQuestionDetails.type = null;\n\t\t\t}\n\t\t},\n\t\tremoveWrittenQuestionDraft({state, getters, commit}) {\n\t\t\tcommit('resetCreatingQuestion')\n\t\t},\n\t\tbeginSnappingQuestion({state, getters, commit}) {\n\t\t\tif (!state.states.isSnappingQuestion) {\n\t\t\t\tcommit('toggleSnappingQuestionMode');\n\t\t\t\tstate.creatingQuestionDetails.type = 'snapped';\n\t\t\t}\n\t\t},\n\t\thandleSnapQuestion({state, getters, commit, dispatch}, e) {\n\t\t\tlet files = e.target.files || e.dataTransfer.files\n\n\t\t\tif (!files.length) { return }\n\n\t\t\tlet fileList = Array.prototype.slice.call(e.target.files);\n\n\t\t\tfileList.forEach(f => {\n\t\t\t\tif (!f.type.match(\"image.*\")) { return; }\n\n\t\t\t\tlet reader = new FileReader();\n\n\t\t\t\treader.onload = (e) => {\n\t\t\t\t\tstate.creatingQuestionDetails.snappedQuestions.push(e.target.result)\n\t\t\t\t\tstate.creatingQuestionDetails.snappedPreviews.push({\n\t\t\t\t\t\tsource: e.target.result,\n\t\t\t\t\t\tpreview: false,\n\t\t\t\t\t\tcropping: false\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treader.readAsDataURL(f);\n\t\t\t});\n\t\t},\n\t\tsaveCroppedSnappedQuestion({state, commit}, payload) {\n\t\t\tstate.creatingQuestionDetails.snappedPreviews[payload.key].source = payload.dataURL\n\t\t\tstate.creatingQuestionDetails.snappedQuestions[payload.key] = payload.dataURL\n\t\t\tcommit('toggleCroppingSnappedQuestionMode', payload.key);\n\t\t},\n\t\tremoveSnappedQuestion({state, commit}, key) {\n\t\t\tstate.creatingQuestionDetails.snappedQuestions.splice(key, 1);\n\t\t\tstate.creatingQuestionDetails.snappedPreviews.splice(key, 1);\n\n\t\t\tif (!state.creatingQuestionDetails.snappedQuestions.length) {\n\t\t\t\tcommit('resetCreatingQuestion')\n\t\t\t\tcommit('toggleSnappingQuestionMode')\n\t\t\t}\n\t\t},\n\t\thandleZoomQuestion({state, commit}, payload) {\n\t\t\t// handled when recording stops\n\t\t\t// payload should be the zoom recording file in blob\n\t\t\tconsole.log('trigger when new video stored');\n\n\t\t\tstate.creatingQuestionDetails.zoomMeetings = payload;\n\t\t\tconsole.log('payload', payload);\n\t\t},\n\t\tsaveZoomQuestionToDraf({state, commit}) {\n\t\t\t//pushing questionDetails.zoomMeetings to assignmentDetails.question\n\t\t\tconsole.log('saving zoom question draf')\n\n\t\t\tcommit('saveQuestionToDraft');\n\n\t\t\tif(state.creatingQuestionDetails.zoomMeetings) {\n\t\t\t\tcommit('toogleZoomQuestionMode');\n\t\t\t} else {\n\t\t\t\tcommit('toggleShowingErrorMode');\n\t\t\t\t}\n\t\t},\n\t\tcloseToggleDuration() {\n\t\t\t// MODE: MODAL\n\t\t\tif (this.durationDay === '') { this.durationDay = 0 }\n\t\t\tif (this.durationHour === '') { this.durationHour = 0 }\n\t\t\tif (this.durationMinute === '') { this.durationMinute = 0 }\n\n\t\t\tthis.toggleDuration = !this.toggleDuration\n\t\t},\n\t\tgetSchools({state}){\n\t\t\tTeacherRepository\n\t\t\t\t.getTeacherSchools()\n\t\t\t\t.then(res => {\n\t\t\t\t\tconsole.log('res', res.data);\n\t\t\t\t\tres.data.forEach(item => {\n\t\t\t\t\t\tstate.selectables.schools.push({\n\t\t\t\t\t\t\tid: item.id, \n\t\t\t\t\t\t\tname: item.name\n\t\t\t\t\t\t});\n\t\t\t\t\t})\n\t\t\t\t\t// update state.selectables.schools\n\t\t\t\t})\n\n\t\t},\n\t\tgetSubjects({state}) {\n\t\t\tTeacherRepository\n\t\t\t\t.getTeacherSubjects()\n\t\t\t\t.then(response => {\n\t\t\t\t\tif (response.data.success) {\n\t\t\t\t\t\tconst data = response.data.data\n\t\t\t\t\t\tconst numOfSubjects = data.length\n\n\t\t\t\t\t\tfor (let i = 0; i < numOfSubjects; i++) {\n\t\t\t\t\t\t\tlet item = data[i];\n\t\t\t\t\t\t\tlet subjectDetail = {\n\t\t\t\t\t\t\t\tid: item.subject_id,\n\t\t\t\t\t\t\t\tname: item.subject_name\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstate.selectables.subjects.push(subjectDetail);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t},\n\t\tgetClasses({state, commit}) {\n\t\t\tTeacherRepository\n\t\t\t.getTeacherClasses()\n\t\t\t.then(response => {\n\t\t\t\tif (response.data.success) {\n\t\t\t\t\tconst data = response.data.data\n\t\t\t\t\tfor (let i = 0; i < data.length; i++) {\n\t\t\t\t\t\tlet item = data[i];\n\t\t\t\t\t\tlet classDetail = {\n\t\t\t\t\t\t\tid: item.class_id,\n\t\t\t\t\t\t\tname: item.class_name,\n\t\t\t\t\t\t\tnumOfStudents: item.num_of_students,\n\t\t\t\t\t\t\tisHomeroom: item.homeroom,\n\t\t\t\t\t\t}\n\t\t\t\t\t\tstate.selectables.classrooms.push(classDetail);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t},\n\t\t// updateShowManualDescription() {\n\t\t//   this.showDescription = !this.showDescription\n\t\t//   this.isCreatingQuestion = !this.isCreatingQuestion;\n\t\t// },\n\t\thandleQuestionDetails(details) {\n\t\t\tthis.questionDetails = details;\n\t\t},\n\t\tsaveQuestion({state, getters, commit}) {\n\t\t\t// Check if user selected a type of question\n\t\t\tif (state.creatingQuestionDetails.type) {\n\n\t\t\t// Check if user has inserted a question title\n\t\t\tif (state.creatingQuestionDetails.title) {\n\t\t\t\t// If user opt to Write Question\n\t\t\t\tif (getters.creatingQuestionType === 'written') {\n\t\t\t\t\tif (getters.hasWrittenQuestionDraft) {\n\t\t\t\t\t\tcommit('saveQuestionToAssignmentDetails');\n\t\t\t\t\t\tcommit('resetCreatingQuestion')\n\t\t\t\t\t\tcommit('toggleCreatingQuestionMode')\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.log('please write something')\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// If user opt to Snap Question\n\t\t\t\tif (getters.creatingQuestionType === 'snapped') {\n\t\t\t\t\tcommit('saveQuestionToDraft')\n\n\t\t\t\t\tif (getters.hasSnappedQuestionDraft) {\n\t\t\t\t\t\tcommit('saveQuestionToAssignmentDetails');\n\t\t\t\t\t\tcommit('resetCreatingQuestion')\n\t\t\t\t\t\tcommit('toggleCreatingQuestionMode')\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.log('please snap something')\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// if user opt to zoom question\n\t\t\t\tif (getters.creatingQuestionType === 'zoom') {\n\t\t\t\t\tconsole.log('saving zoom question');\n\n\t\t\t\t\tcommit('saveQuestionToDraft');\n\t\t\t\t\tif (getters.hasZoomQuestionDraf) {\n\t\t\t\t\t\tcommit('saveQuestionToAssignmentDetails');\n\t\t\t\t\t\tcommit('resetCreatingQuestion')\n\t\t\t\t\t\tcommit('toggleCreatingQuestionMode')\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.log('please record something');\n\t\t\t\t\t}\n\n\t\t\t\t\t// plan. sanitize and push to server\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.log('please fill in title')\n\t\t\t}\n\t\t} else {\n\t\t\tconsole.log('Please select a type of question.')\n\t\t}\n\t\t},\n\t\teditSavedQuestion({state, commit, getters}) {\n\t\t\tlet type = getters.savedQuestionType\n\n\t\t\tcommit('beginEditingQuestionMode', type)\n\t\t\tcommit('loadSavedQuestionForEdit', type)\n\t\t},\n\t\tcancelCreatingQuestion({state, commit, type}) {\n\t\t\tif (!getters.hasSavedQuestion) {\n\t\t\t\tcommit('resetCreatingQuestion')\n\t\t\t}\n\n\t\t\tcommit('cancelCreatingQuestionMode')\n\t\t},\n\t\tcheckForm({state, commit, getters}) {\n\t\t\t// Reset error\n\t\t\tstate.errors = [];\n\n\t\t\tif (!state.assignmentDetails.title) { state.errors.push('Title required.'); }\n\t\t\tif (!state.assignmentDetails.subject_id) { state.errors.push('Subject required.'); }\n\t\t\tif (!state.assignmentDetails.classroom_id) { state.errors.push('Classroom required.'); }\n\t\t\tif (!getters.hasSavedQuestion) { state.errors.push('Question required.'); }\n\t\t\tif (!state.assignmentDetails.due_datetime) { state.errors.push('Due date required'); }\n\t\t\tif (state.errors.length) { commit('toggleShowingErrorMode') }\n\t\t},\n\t\tasync sendData({state, commit, getters, dispatch}) {\n\t\t\t// send data to the server\n\n\t\t\tdispatch('checkForm');\n\n\t\t\tif (!getters.hasErrors) {\n\t\t\t\tlet counter = 0;\n\t\t\t\tlet zoom_meeting = null;\n\n\t\t\t\tif (state.states.isShowingScheduler) {\n\t\t\t\t\tcommit('toggleShowingSchedulerMode')\n\t\t\t\t}\n\n\t\t\t\tcommit('togglePublishingMode')\n\t\t\t\tcommit('toggleShowingSchedulerMode')\n\n\t\t\t// from lavarel code, it seems push the video to the server first and to get meeting\n\t\t\t// and then push the assignment  details\n\n\t\t\t// pre-flight check: see if it's a zoom meeting video.\n\t\t\t// if it's a zoom meeting, upload the video first and update assignment details\n\t\t\tconsole.log('check if got zoom video');\n\t\t\tif(state.assignmentDetails.question.type === 'zoom'){\n\t\t\t\tlet formData = new FormData();\n\t\t\t\tconst path = '/zoom-meeting/push_s3';\n\t\t\t\tlet recUrl = state.assignmentDetails.question.zoomMeetings;\n\t\t\t\tconsole.log('recovering video from ', recUrl);\n\n\t\t\t\tconsole.log('getting the video file');\n\t\t\t\tlet recBlob = await fetch(recUrl).then( r =>\n\t\t\t\t\tr.blob()).then(blobFile => new File([blobFile], \"test.webm\", { type: \"video/webm\"})\n\t\t\t\t);\n\n\t\t\t\tformData.append('zoomMeetings', recBlob);\n\n\t\t\t\tawait Repository.post(path, formData,   {\n\t\t\t\t\theaders: { 'Content-Type': 'multipart/form-data' }\n\t\t\t\t}).then( (res) => {\n\t\t\t\t\tzoom_meeting = res.data.zoom_meeting;\n\t\t\t\t\tconsole.log('res', res);\n\t\t\t\t});\n\t\t\t}\n\t\t\tconsole.log('done sending a zoom video', zoom_meeting);\n\n\t\t\tconsole.log('pushing the assignment detail');\n\t\t\t// push the assignment details for each class.\n\t\t\tstate.assignmentDetails.classroom_id.forEach((classroom, index) => {\n\n\t\t\tlet formData = new FormData();\n\n\t\t\tformData.append('subject_id', state.assignmentDetails.subject_id);\n\t\t\tformData.append('school_id', state.assignmentDetails.school_id);\n\t\t\tformData.append('class_id', classroom.id);\n\t\t\tformData.append('title', state.assignmentDetails.title);\n\t\t\tformData.append('written_question_title', state.assignmentDetails.question.title);\n\t\t\tformData.append('written_description', state.assignmentDetails.question.writtenQuestion ?? '');\n\t\t\tformData.append('due_datetime', moment(state.assignmentDetails.due_datetime).format('YYYY-MM-DD HH:mm:ss'));\n\t\t\tformData.append('published_at', moment(state.assignmentDetails.published_at).format('YYYY-MM-DD HH:mm:ss'));\n\t\t\tformData.append('remarks', state.assignmentDetails.remarks ?? '');\n\t\t\tformData.append('recording_meeting_id', zoom_meeting ? zoom_meeting.meeting_id : '');\n\n\t\t\tfor (let i = 0; i < state.assignmentDetails.question.snappedQuestions.length; i++) {\n\t\t\t\tlet file = state.assignmentDetails.question.snappedQuestions[i];\n\t\t\t\tformData.append('snap_question[' + i + ']', file);\n\t\t\t}\n\n\t\t\t// the part where actually save the assignment\n\t\t\tRepository.post('/assignments/store',\n\t\t\t\tformData,\n\t\t\t\t{\n\t\t\t\t\t\theaders: { 'Content-Type': 'multipart/form-data' }\n\t\t\t\t})\n\t\t\t\t.then(response => {\n\t\t\t\t\tif (response.data.success) {\n\t\t\t\t\t\tcounter++;\n\n\t\t\t\t\t\tif (counter === state.assignmentDetails.classroom_id.length) {\n\t\t\t\t\t\t\tcommit('togglePublishingMode')\n\t\t\t\t\t\t\tcommit('togglePublishedMode')\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcounter++;\n\t\t\t\t\t\tif (counter === state.assignmentDetails.classroom_id.length) {\n\t\t\t\t\t\t\t\tcommit('toggleShowingErrorMode')\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.catch(error => {\n\t\t\t\t\tcommit('togglePublishingMode')\n\t\t\t\t\tcommit('toggleShowingErrorMode')\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tconsole.log('done sending the assignment to db');\n\t\t}\n\t\t},\n\t\ttestRecordMeeting({state, commit}){\n\t\t\t// test the past where posting to '/zoom-meeting/store'\n\t\t\t//const host = 'https://admin.gotsnapped.tech/api';\n\t\t\tconst host = 'http://localhost:8000/api';\n\t\t\tconst path = '/zoom-meeting/store';\n\t\t\tconst topic = \"test meeting\"\n\t\t\tlet formData = new FormData();\n\n\t\t\tformData.append('topic', topic);\n\t\t\tformData.append('agenda', topic);\n\t\t\tformData.append('duration', '5');\n\t\t\tformData.append('host_video', '1');\n\t\t\tformData.append('participant_video', '1');\n\n\n\t\t\tRepository.post(path, formData).then((res) => {\n\t\t\t\tconsole.log('response', res);\n\n\t\t\t\tconsole.log('data', res.data.data);\n\t\t\t\tconsole.log('meetind_id', res.data.data.id);\n\t\t\t\tcommit('setMeetingId', res.data.data.id);\n\n\t\t\t\tconsole.log('meeting_url', res.data.data.join_url);\n\t\t\t})\n\n\t\t},\n\t\ttestGetMeetingRecordings({state}){\n\t\t\t// retrive meeting recordings from state.states.meeting_id\n\t\t\tconsole.log('meeting_id is ', state.states.meeting_id);\n\n\t\t\tif(state.states.meeting_id) {\n\t\t\t\tconst path = '/zoom-meeting/' + state.states.meeting_id + '/recordings';\n\t\t\t\tconsole.log('getting recordings from ', path);\n\t\t\t\tRepository.get(path).then( (res) => {\n\t\t\t\t\tconsole.log('res', res);\n\t\t\t\t})\n\t\t\t}\n\t\t},\n\t\tasync testSendRecordings({state }){\n\t\t\tconsole.log('in testSendRecordings');\n\t\t\tconst path = '/zoom-meeting/push_s3';\n\n\t\t\t/*\n\t\t\t\tplan:-\n\t\t\t\tfor testing, see if i can push the file contents from\n\t\t\t\t\tquestionDetails.zoomMeetings to the server and eventually to s3.\n\t\t\t*/\n\n\t\t\t//validation, ensure the zoomMeetings is populated\n\t\t\t/*\n\t\t\tif(!state.assignmentDetails.zoomMeetings){\n\t\t\t\tconsole.log('plese record a video');\n\t\t\t}\n\t\t\t*/\n\n\t\t\t// build up formData\n\t\t\tlet formData = new FormData();\n\t\t\tlet recUrl = state.creatingQuestionDetails.zoomMeetings;\n\t\t\tlet recBlob = await fetch(recUrl).then( r =>\n\t\t\t\tr.blob()).then(blobFile =>\n\t\t\t\t\tnew File([blobFile], \"test.webm\", { type: \"video/webm\"})\n\t\t\t);\n\t\t\tformData.append('zoomMeetings', recBlob);\n\t\t\tRepository.post(path, formData,   {\n\t\t\t\theaders: { 'Content-Type': 'multipart/form-data' }\n\t\t\t}).then( (res) => {\n\t\t\t\tconsole.log('res', res);\n\t\t\t});\n\t\t},\n\t\tgetDetails: function () {\n\t\t\tTeacherRepository\n\t\t\t.getTeacherDetails()\n\t\t\t.then(response => {\n\t\t\t\tif (response.data.success) {\n\t\t\t\t\t\tconst data = response.data.data[0]\n\n\t\t\t\t\t\tlet teacherDetail = { id: data.id, }\n\n\t\t\t\t\t\tlocalStorage.setItem('teacherID', teacherDetail.id)\n\t\t\t\t}\n\t\t\t})\n\t\t},\n\t\tsetAssignmentTitle({state}, maxedTitle) {\n\t\t\tstate.assignmentDetails.title = maxedTitle;\n\t\t}\n\t},\n\tgetters: {\n\t\tcreatingQuestionType: (state) => { return state.creatingQuestionDetails.type; },\n\t\tsavedQuestionType: (state) => { return state.assignmentDetails.question.type; },\n\t\tdueDateTime(state) { return moment(state.assignmentDetails.due_datetime).format('DD/MM/YYYY') },\n\t\tsnappedPreviews(state) { return state.assignmentDetails.question.snappedQuestions; },\n\t\thasSavedQuestion: (state) => {\n\t\t\treturn state.assignmentDetails.question.type && (\n\t\t\t\tstate.assignmentDetails.question.writtenQuestion ||\n\t\t\t\tstate.assignmentDetails.question.snappedQuestions.length ||\n\t\t\t\tstate.assignmentDetails.question.zoomMeetings !== null\n\t\t\t);\n\t\t},\n\t\thasSavedDueDatetime: (state) => {\n\t\t\t\treturn state.assignmentDetails.due_datetime !== null;\n\t\t},\n\t\thasEditableQuestion(state, getters) {\n\t\t\t\treturn state.states.isCreatingQuestion && !state.states.isWritingQuestion && (getters.hasWrittenQuestionDraft || getters.hasSnappedQuestionDraft)\n\t\t},\n\t\thasWrittenQuestionDraft: (state) => {\n\t\t\t\treturn state.questionDraft.type ? (state.questionDraft.type === 'written' && state.questionDraft.writtenQuestion) : false;\n\t\t},\n\t\thasSnappedQuestionDraft(state) {\n\t\t\t\treturn state.questionDraft.type ? state.questionDraft.type === 'snapped' && state.questionDraft.snappedQuestions.length > 0 : false;\n\t\t},\n\t\thasZoomQuestionDraf(state){\n\t\t\treturn state.questionDraft.type ?\n\t\t\t\tstate.questionDraft.type === 'zoom' && state.questionDraft.zoomMeetings !== null :\n\t\t\t\tfalse;\n\t\t},\n\t\thasErrors(state) { return state.errors.length || state.states.isShowingError },\n\t\thasZoomMeeting(state) { return state.states.isInZoomMeeting; },\n\t\thasZoomVideo(state) { return state.states.isVideoOn; },\n\t\thasZoomMic(state) { return state.states.isMicOn; },\n\t\thasZoomScreenShare(state) { return state.states.isScreenShare; },\n\t\thasZoomRecording(state) { return state.states.isRecording; }\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}