{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, normalizeClass as _normalizeClass } from \"vue\";\nconst _hoisted_1 = {\n  key: 0,\n  class: \"w-1/7 md:w-1/10\"\n};\nconst _hoisted_2 = {\n  class: \"w-5/7 truncate px-1\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_stop_watch_icon = _resolveComponent(\"stop-watch-icon\");\n  return $options.timeLeft ? (_openBlock(), _createElementBlock(\"div\", {\n    key: 0,\n    class: _normalizeClass([$options.containerClass, \"rounded-full text-white tracking-tight flex flex-row items-center justify-center px-1 py-1\"])\n  }, [$props.hasClockIcon ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_stop_watch_icon)])) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"div\", _hoisted_2, _toDisplayString($options.timeLeft), 1 /* TEXT */)], 2 /* CLASS */)) : _createCommentVNode(\"v-if\", true);\n}","map":{"version":3,"names":["class","$options","timeLeft","_createElementBlock","_normalizeClass","containerClass","$props","hasClockIcon","_hoisted_1","_createVNode","_component_stop_watch_icon","_createElementVNode","_hoisted_2","_toDisplayString"],"sources":["/Users/erwinkarim/Websites/Snapped/snapped-mobile-master/src/components/CountdownTimer.vue"],"sourcesContent":["<template>\n  <div v-if=\"timeLeft\" :class=\"containerClass\"\n       class=\"rounded-full text-white tracking-tight flex flex-row items-center justify-center px-1 py-1\">\n    <div v-if=\"hasClockIcon\" class=\"w-1/7 md:w-1/10\">\n      <stop-watch-icon/>\n    </div>\n    <div class=\"w-5/7 truncate px-1\">\n      {{ timeLeft }}\n    </div>\n  </div>\n</template>\n\n<script>\nimport moment from \"moment\";\nimport StopWatchIcon from \"@/components/icons/StopWatchIcon\";\n\nexport default {\n  name: \"CountdownTimer\",\n  components: {StopWatchIcon},\n  props: {\n    dueDateTime: {\n      type: String,\n      required: true,\n    },\n    hasClockIcon: {\n      type: Boolean,\n      default: false\n    },\n    hasTwentyFourHourLimit: {\n      type: Boolean,\n      default: false\n    },\n    hasDynamicBackgroundColor: {\n      type: Boolean,\n      default: false\n    },\n    disableRedAlert: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    return {\n      timePassed: 0,\n      timerInterval: null,\n      inSeconds: {\n        day: 86400,\n        hour: 3600,\n        minute: 60\n      },\n      customBackgroundColor: null\n    }\n  },\n  computed: {\n\n    timeTotal() {\n      // Calculate total time based on difference from now to due date\n      let now = moment().toDate()\n      let dueDateTime = moment(this.dueDateTime, 'YYYY-MM-DD HH:mm:ss')\n\n      let timeDiff = dueDateTime.diff(now);\n      let duration = moment.duration(timeDiff);\n\n      return Math.floor(duration.asSeconds());\n    },\n    secondsLeft() {\n      return this.timeTotal - this.timePassed\n    },\n    timeLeft() {\n\n      let secondsLeft = this.secondsLeft;\n      let value = null;\n\n      if (this.hasTwentyFourHourLimit && secondsLeft > this.inSeconds.day) {\n        clearInterval(this.timerInterval)\n      } else if (secondsLeft > 0) {\n\n        // If more than 24 hours, display in terms of days\n        if (secondsLeft > this.inSeconds.day) {\n          let days = Math.floor(secondsLeft / this.inSeconds.day);\n\n          if (days > 30) {\n            let months = Math.floor(days / 30);\n            value = `${months} ${days === 1 ? 'month' : 'months'}`\n          } else {\n            value = `> ${days} ${days === 1 ? 'day' : 'days'}`\n          }\n\n          this.customBackgroundColor = 'bg-purple-primary'\n\n        }\n        // Else, display in format hh:mm:ss\n        else {\n          let hours = Math.floor(secondsLeft / this.inSeconds.hour);\n          secondsLeft -= hours * this.inSeconds.hour;\n\n          let minutes = Math.floor(secondsLeft / this.inSeconds.minute)\n          secondsLeft -= minutes * this.inSeconds.minute;\n\n          let seconds = secondsLeft % this.inSeconds.minute\n\n          hours < 10 ? hours = `0${hours}` : null;\n          minutes < 10 ? minutes = `0${minutes}` : null;\n          seconds < 10 ? seconds = `0${seconds}` : null;\n\n          value = `${hours}:${minutes}:${seconds}`\n\n          if (hours < 1) {\n            this.customBackgroundColor = 'bg-yellow-primary'\n          } else {\n            this.customBackgroundColor = 'bg-purple-primary'\n          }\n        }\n\n      } else {\n        clearInterval(this.timerInterval)\n        value = '00:00:00'\n        this.customBackgroundColor = this.disableRedAlert ? 'bg-purple-primary' : 'bg-red-primary'\n      }\n\n      return value\n    },\n    containerClass() {\n      if (this.hasDynamicBackgroundColor && this.customBackgroundColor) {\n        return this.customBackgroundColor;\n      } else {\n        return 'bg-transparent'\n      }\n    }\n  },\n  methods: {\n    startTimer() {\n      this.timerInterval = setInterval(() => (this.timePassed += 1), 1000);\n    }\n  },\n  mounted() {\n    this.startTimer()\n  }\n}\n</script>\n\n<style scoped>\n\n</style>\n"],"mappings":";;;EAG6BA,KAAK,EAAC;;;EAG1BA,KAAK,EAAC;AAAqB;;;SALvBC,QAAA,CAAAC,QAAQ,I,cAAnBC,mBAAA,CAQM;;IARgBH,KAAK,EAAAI,eAAA,EAAEH,QAAA,CAAAI,cAAc,EAChC,4FAA4F;MAC1FC,MAAA,CAAAC,YAAY,I,cAAvBJ,mBAAA,CAEM,OAFNK,UAEM,GADJC,YAAA,CAAkBC,0BAAA,E,wCAEpBC,mBAAA,CAEM,OAFNC,UAEM,EAAAC,gBAAA,CADDZ,QAAA,CAAAC,QAAQ,iB"},"metadata":{},"sourceType":"module","externalDependencies":[]}