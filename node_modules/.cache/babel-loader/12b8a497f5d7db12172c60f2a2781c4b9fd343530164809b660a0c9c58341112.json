{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport StudentRepository from \"@/repositories/StudentRepository\";\nimport AuthenticationRepository from \"@/repositories/AuthenticationRepository\";\nimport axios from \"axios\";\nexport default {\n  namespaced: true,\n  state: () => ({\n    schoolRankings: {\n      data: [],\n      meta: null,\n      filters: {\n        pageNum: 1,\n        perPage: 20,\n        search: ''\n      },\n      infiniteScrollIdentifier: 0\n    },\n    nationalRankings: {\n      data: [],\n      meta: null,\n      filters: {\n        pageNum: 1,\n        perPage: 20,\n        search: ''\n      },\n      infiniteScrollIdentifier: 0\n    }\n  }),\n  mutations: {\n    test(state, payload) {}\n  },\n  actions: {\n    handleSchoolRankingData({\n      state,\n      commit,\n      getters,\n      dispatch\n    }) {\n      return new Promise((resolve, reject) => {\n        if (getters.hasMoreSchoolRankingData) {\n          StudentRepository.getBatchRanking(state.schoolRankings.filters).then(response => {\n            let data = response.data;\n            if (data.success) {\n              // Append ranking to array\n              data.data.forEach(test => {\n                state.schoolRankings.data.push(test);\n              });\n\n              // Update meta details and pageNum for filters\n              state.schoolRankings.meta = data.meta;\n              state.schoolRankings.filters.pageNum = state.schoolRankings.meta.current_page + 1;\n              resolve('loaded');\n            } else {\n              resolve('completed');\n            }\n          });\n        } else {\n          resolve('completed');\n        }\n      });\n    },\n    handleNationalRankingData({\n      state,\n      commit,\n      getters,\n      dispatch\n    }) {\n      return new Promise((resolve, reject) => {\n        if (getters.hasMoreNationalRankingData) {\n          StudentRepository.getNationalRanking(state.nationalRankings.filters).then(response => {\n            let data = response.data;\n            if (data.success) {\n              // Append ranking to array\n              data.data.forEach(student => {\n                state.nationalRankings.data.push(student);\n              });\n\n              // Update meta details and pageNum for filters\n              state.nationalRankings.meta = data.meta;\n              state.nationalRankings.filters.pageNum = state.nationalRankings.meta.current_page + 1;\n              resolve('loaded');\n            } else {\n              resolve('completed');\n            }\n          });\n        } else {\n          resolve('completed');\n        }\n      });\n    }\n  },\n  getters: {\n    hasMoreSchoolRankingData: state => {\n      if (state.schoolRankings.meta) {\n        return state.schoolRankings.filters.pageNum <= state.schoolRankings.meta.last_page;\n      } else {\n        return true;\n      }\n    },\n    hasMoreNationalRankingData: state => {\n      if (state.nationalRankings.meta) {\n        return state.nationalRankings.filters.pageNum <= state.nationalRankings.meta.last_page;\n      } else {\n        return true;\n      }\n    }\n  }\n};","map":{"version":3,"names":["StudentRepository","AuthenticationRepository","axios","namespaced","state","schoolRankings","data","meta","filters","pageNum","perPage","search","infiniteScrollIdentifier","nationalRankings","mutations","test","payload","actions","handleSchoolRankingData","commit","getters","dispatch","Promise","resolve","reject","hasMoreSchoolRankingData","getBatchRanking","then","response","success","forEach","push","current_page","handleNationalRankingData","hasMoreNationalRankingData","getNationalRanking","student","last_page"],"sources":["/Users/erwinkarim/Websites/Snapped/snapped-mobile-master/src/store/modules/studentRanking.js"],"sourcesContent":["import StudentRepository from \"@/repositories/StudentRepository\";\nimport AuthenticationRepository from \"@/repositories/AuthenticationRepository\";\nimport axios from \"axios\";\n\n\nexport default {\n    namespaced: true,\n    state: () => ({\n        schoolRankings: {\n            data: [],\n            meta: null,\n            filters: {\n                pageNum: 1,\n                perPage: 20,\n                search: ''\n            },\n            infiniteScrollIdentifier: 0\n        },\n        nationalRankings: {\n            data: [],\n            meta: null,\n            filters: {\n                pageNum: 1,\n                perPage: 20,\n                search: ''\n            },\n            infiniteScrollIdentifier: 0\n        }\n\n    }),\n    mutations: {\n        test(state, payload) {\n\n        },\n    },\n    actions: {\n        handleSchoolRankingData({state, commit, getters, dispatch}) {\n\n            return new Promise((resolve, reject) => {\n\n                if (getters.hasMoreSchoolRankingData) {\n\n                    StudentRepository.getBatchRanking(state.schoolRankings.filters)\n                        .then(response => {\n\n                            let data = response.data;\n\n                            if (data.success) {\n\n                                // Append ranking to array\n                                data.data.forEach((test) => {\n                                    state.schoolRankings.data.push(test)\n                                })\n\n                                // Update meta details and pageNum for filters\n                                state.schoolRankings.meta = data.meta;\n                                state.schoolRankings.filters.pageNum = state.schoolRankings.meta.current_page + 1;\n\n                                resolve('loaded')\n                            } else {\n                                resolve('completed')\n                            }\n                        })\n                } else {\n                    resolve('completed')\n                }\n\n            })\n        },\n        handleNationalRankingData({state, commit, getters, dispatch}) {\n\n            return new Promise((resolve, reject) => {\n\n                if (getters.hasMoreNationalRankingData) {\n\n                    StudentRepository.getNationalRanking(state.nationalRankings.filters)\n                        .then(response => {\n\n                            let data = response.data;\n\n                            if (data.success) {\n\n                                // Append ranking to array\n                                data.data.forEach((student) => {\n                                    state.nationalRankings.data.push(student)\n                                })\n\n                                // Update meta details and pageNum for filters\n                                state.nationalRankings.meta = data.meta;\n                                state.nationalRankings.filters.pageNum = state.nationalRankings.meta.current_page + 1;\n\n                                resolve('loaded')\n                            } else {\n                                resolve('completed')\n                            }\n\n\n                        })\n                } else {\n                    resolve('completed')\n                }\n\n            })\n        }\n\n    },\n    getters: {\n\n        hasMoreSchoolRankingData: (state) => {\n            if (state.schoolRankings.meta) {\n                return state.schoolRankings.filters.pageNum <= state.schoolRankings.meta.last_page\n            } else {\n                return true;\n            }\n        },\n        hasMoreNationalRankingData: (state) => {\n            if (state.nationalRankings.meta) {\n                return state.nationalRankings.filters.pageNum <= state.nationalRankings.meta.last_page\n            } else {\n                return true;\n            }\n        },\n\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}