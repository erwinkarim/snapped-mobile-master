{"ast":null,"code":"import Vue from 'vue';\nimport VueRouter from 'vue-router';\nimport routes from \"@/router/routes\";\nimport store from '@/store/index';\nVue.use(VueRouter);\nconst router = new VueRouter({\n  mode: 'history',\n  base: process.env.BASE_URL,\n  routes\n});\nexport default router;\nrouter.beforeEach((to, from, next) => {\n  // Check if route does not exist. If true, redirect to login\n  if (to.matched.length === 0 && to.path !== '/') {\n    return next({\n      name: 'login'\n    });\n  }\n\n  // When entering root path '/'\n  if (to.path === from.path) {\n    if (localStorage.getItem('token')) {\n      store.commit('auth_success', localStorage.getItem('token'));\n      store.dispatch('setAuthUser').then(userRole => {\n        if (userRole === 'Student') {\n          return next({\n            name: 'student.home'\n          });\n        }\n        if (userRole === 'Teacher') {\n          return next({\n            name: 'teacher.home'\n          });\n        }\n      });\n    } else {\n      return next({\n        name: 'login'\n      });\n    }\n  }\n\n  // If path is login, check if user is logged in. If yes, then redirect to home\n  if (to.path === '/login') {\n    if (store.getters.isLoggedIn) {\n      // Check if authenticated user's details does not exist. If no, get.\n      let authUserDetails = store.getters.getAuthUser;\n      if (Object.keys(authUserDetails).length === 0 && authUserDetails.constructor === Object) {\n        store.dispatch('setAuthUser').then(userRole => {\n          if (userRole === 'Student') {\n            return next({\n              name: 'student.home'\n            });\n          }\n          if (userRole === 'Teacher') {\n            return next({\n              name: 'teacher.home'\n            });\n          }\n        });\n      } else {\n        if (authUserDetails.role === 'Student') {\n          return next({\n            name: 'student.home'\n          });\n        }\n        if (authUserDetails.role === 'Teacher') {\n          return next({\n            name: 'teacher.home'\n          });\n        }\n      }\n    } else {\n      return next();\n    }\n    return next(false);\n  }\n\n  // If route has guard 'checkAuth'.\n  if (to.matched.some(record => record.meta.checkAuth)) {\n    // Check if user is logged in.\n    if (store.getters.isLoggedIn) {\n      // Check if authenticated user's details does not exist. If no, get.\n      let authUserDetails = store.getters.getAuthUser;\n      if (Object.keys(authUserDetails).length === 0 && authUserDetails.constructor === Object) {\n        store.dispatch('setAuthUser').then(response => {\n          // If route has guard 'checkRole'\n          if (to.matched.some(record => record.meta.checkRole)) {\n            if (store.getters.getAuthUserRole === to.meta.checkRole) {\n              return next();\n            } else {\n              return next(false);\n            }\n          } else {\n            // If only check auth && without check role\n            return next();\n          }\n        });\n      } else {\n        if (to.matched.some(record => record.meta.checkRole)) {\n          if (store.getters.getAuthUserRole === to.meta.checkRole) {\n            return next();\n          } else {\n            return next(false);\n          }\n        } else {\n          // If only check auth && without check role\n          return next();\n        }\n      }\n    } else {\n      return next({\n        name: 'login'\n      });\n    }\n  }\n\n  // If route is open to public, allow next\n  else {\n    return next();\n  }\n});","map":{"version":3,"names":["Vue","VueRouter","routes","store","use","router","mode","base","process","env","BASE_URL","beforeEach","to","from","next","matched","length","path","name","localStorage","getItem","commit","dispatch","then","userRole","getters","isLoggedIn","authUserDetails","getAuthUser","Object","keys","constructor","role","some","record","meta","checkAuth","response","checkRole","getAuthUserRole"],"sources":["/Users/erwinkarim/Websites/Snapped/snapped-mobile-master/src/router/index.js"],"sourcesContent":["import Vue from 'vue'\nimport VueRouter from 'vue-router'\n\nimport routes from \"@/router/routes\"\nimport store from '@/store/index'\n\nVue.use(VueRouter)\n\nconst router = new VueRouter({\n    mode: 'history',\n    base: process.env.BASE_URL,\n    routes\n})\n\nexport default router\n\n\nrouter.beforeEach((to, from, next) => {\n\n    // Check if route does not exist. If true, redirect to login\n    if (to.matched.length === 0 && to.path !== '/') {\n        return next({name: 'login'})\n    }\n\n    // When entering root path '/'\n    if (to.path === from.path) {\n\n        if (localStorage.getItem('token')) {\n\n            store.commit('auth_success', localStorage.getItem('token'))\n            store.dispatch('setAuthUser')\n                .then(userRole => {\n\n                        if (userRole === 'Student') {\n                            return next({name: 'student.home'})\n                        }\n\n                        if (userRole === 'Teacher') {\n                            return next({name: 'teacher.home'})\n                        }\n                    }\n                )\n\n        } else {\n            return next({name: 'login'})\n        }\n    }\n\n    // If path is login, check if user is logged in. If yes, then redirect to home\n    if (to.path === '/login') {\n\n        if (store.getters.isLoggedIn) {\n\n            // Check if authenticated user's details does not exist. If no, get.\n            let authUserDetails = store.getters.getAuthUser;\n\n            if (Object.keys(authUserDetails).length === 0 && authUserDetails.constructor === Object) {\n\n                store.dispatch('setAuthUser')\n                    .then(userRole => {\n\n                        if (userRole === 'Student') {\n                                return next({name: 'student.home'})\n                            }\n\n                            if (userRole === 'Teacher') {\n                                return next({name: 'teacher.home'})\n                            }\n                        }\n                    )\n            } else {\n\n                if (authUserDetails.role === 'Student') {\n                    return next({name: 'student.home'})\n                }\n\n                if (authUserDetails.role === 'Teacher') {\n                    return next({name: 'teacher.home'})\n                }\n            }\n        } else {\n            return next()\n        }\n\n        return next(false)\n    }\n\n    // If route has guard 'checkAuth'.\n    if (to.matched.some(record => record.meta.checkAuth)) {\n\n        // Check if user is logged in.\n        if (store.getters.isLoggedIn) {\n\n            // Check if authenticated user's details does not exist. If no, get.\n            let authUserDetails = store.getters.getAuthUser;\n\n            if (Object.keys(authUserDetails).length === 0 && authUserDetails.constructor === Object) {\n\n                store.dispatch('setAuthUser')\n                    .then(response => {\n\n                        // If route has guard 'checkRole'\n                        if (to.matched.some(record => record.meta.checkRole)) {\n                            if (store.getters.getAuthUserRole === to.meta.checkRole) {\n                                return next()\n                            } else {\n                                return next(false)\n                            }\n                        } else{\n                            // If only check auth && without check role\n                            return next()\n                        }\n                    })\n            } else {\n\n                if (to.matched.some(record => record.meta.checkRole)) {\n                    if (store.getters.getAuthUserRole === to.meta.checkRole) {\n                        return next()\n                    } else {\n                        return next(false)\n                    }\n                } else {\n\n                    // If only check auth && without check role\n                    return next()\n                }\n            }\n\n        } else {\n            return next({name: 'login'})\n        }\n\n    }\n\n    // If route is open to public, allow next\n    else {\n        return next()\n    }\n\n})\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}