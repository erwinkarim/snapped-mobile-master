{"ast":null,"code":"import Repository from \"@/repositories/Repository\";\nconst resource = '/submissions';\nexport default {\n  find(submissionID) {\n    return Repository.get(`${resource}/${submissionID}/details`);\n  },\n  store({\n    assignmentID: assignmentID,\n    answerType: answerType,\n    answerContent: answerContent,\n    remarks: remarks\n  }) {\n    let formData = new FormData();\n    formData.append('assignment_id', assignmentID);\n    formData.append('remarks', remarks);\n    if (answerType === 'written') {\n      formData.append('written_answer', answerContent);\n    }\n    if (answerType === 'snapped') {\n      answerContent.forEach(function (file, index) {\n        formData.append(`snap_answer[${index}]`, file);\n      });\n    }\n    return Repository.post(`${resource}/store`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n  },\n  update({\n    submissionID: submissionID,\n    assignmentID: assignmentID,\n    answerType: answerType,\n    answerContent: answerContent,\n    remarks: remarks\n  }) {\n    let formData = new FormData();\n    formData.append('assignment_id', assignmentID);\n    formData.append('remarks', remarks);\n    if (answerType === 'written') {\n      formData.append('written_answer', answerContent);\n    }\n    if (answerType === 'snapped') {\n      // Process toRemove Snapped Answers\n      formData.append('to_remove', answerContent.toRemove.join());\n      answerContent.toAdd.forEach(function (file, index) {\n        formData.append(`snap_answer[${index}]`, file);\n      });\n    }\n    return Repository.post(`${resource}/${submissionID}/update`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n  },\n  convertToDataURL(path) {\n    return Repository.post(`/data-url`, {\n      image_path: path\n    });\n  }\n};","map":{"version":3,"names":["Repository","resource","find","submissionID","get","store","assignmentID","answerType","answerContent","remarks","formData","FormData","append","forEach","file","index","post","headers","update","toRemove","join","toAdd","convertToDataURL","path","image_path"],"sources":["/Users/erwinkarim/Websites/Snapped/snapped-mobile-master/src/repositories/SubmissionRepository.js"],"sourcesContent":["import Repository from \"@/repositories/Repository\";\n\nconst resource = '/submissions'\n\nexport default {\n\n    find(submissionID) {\n        return Repository.get(`${resource}/${submissionID}/details`)\n    },\n\n    store({assignmentID: assignmentID, answerType: answerType, answerContent: answerContent, remarks: remarks}) {\n\n        let formData = new FormData()\n\n        formData.append('assignment_id', assignmentID)\n        formData.append('remarks', remarks)\n\n        if (answerType === 'written') {\n            formData.append('written_answer', answerContent)\n        }\n        if (answerType === 'snapped') {\n            answerContent.forEach(function (file, index) {\n                formData.append(`snap_answer[${index}]`, file);\n            });\n        }\n\n        return Repository.post(`${resource}/store`,\n            formData,\n            {\n                headers: {\n                    'Content-Type': 'multipart/form-data'\n                }\n            });\n    },\n\n    update({\n               submissionID: submissionID,\n               assignmentID: assignmentID,\n               answerType: answerType,\n               answerContent: answerContent,\n               remarks: remarks\n           }) {\n\n        let formData = new FormData()\n\n        formData.append('assignment_id', assignmentID)\n        formData.append('remarks', remarks)\n\n        if (answerType === 'written') {\n            formData.append('written_answer', answerContent)\n        }\n        if (answerType === 'snapped') {\n\n            // Process toRemove Snapped Answers\n            formData.append('to_remove', answerContent.toRemove.join())\n\n            answerContent.toAdd.forEach(function (file, index) {\n                formData.append(`snap_answer[${index}]`, file);\n            });\n        }\n\n        return Repository.post(`${resource}/${submissionID}/update`,\n            formData,\n            {\n                headers: {\n                    'Content-Type': 'multipart/form-data'\n                }\n            });\n    },\n\n    convertToDataURL(path) {\n        return Repository.post(\n            `/data-url`, {\n                image_path: path\n            }\n        );\n    }\n}\n"],"mappings":"AAAA,OAAOA,UAAU,MAAM,2BAA2B;AAElD,MAAMC,QAAQ,GAAG,cAAc;AAE/B,eAAe;EAEXC,IAAIA,CAACC,YAAY,EAAE;IACf,OAAOH,UAAU,CAACI,GAAG,CAAE,GAAEH,QAAS,IAAGE,YAAa,UAAS,CAAC;EAChE,CAAC;EAEDE,KAAKA,CAAC;IAACC,YAAY,EAAEA,YAAY;IAAEC,UAAU,EAAEA,UAAU;IAAEC,aAAa,EAAEA,aAAa;IAAEC,OAAO,EAAEA;EAAO,CAAC,EAAE;IAExG,IAAIC,QAAQ,GAAG,IAAIC,QAAQ,EAAE;IAE7BD,QAAQ,CAACE,MAAM,CAAC,eAAe,EAAEN,YAAY,CAAC;IAC9CI,QAAQ,CAACE,MAAM,CAAC,SAAS,EAAEH,OAAO,CAAC;IAEnC,IAAIF,UAAU,KAAK,SAAS,EAAE;MAC1BG,QAAQ,CAACE,MAAM,CAAC,gBAAgB,EAAEJ,aAAa,CAAC;IACpD;IACA,IAAID,UAAU,KAAK,SAAS,EAAE;MAC1BC,aAAa,CAACK,OAAO,CAAC,UAAUC,IAAI,EAAEC,KAAK,EAAE;QACzCL,QAAQ,CAACE,MAAM,CAAE,eAAcG,KAAM,GAAE,EAAED,IAAI,CAAC;MAClD,CAAC,CAAC;IACN;IAEA,OAAOd,UAAU,CAACgB,IAAI,CAAE,GAAEf,QAAS,QAAO,EACtCS,QAAQ,EACR;MACIO,OAAO,EAAE;QACL,cAAc,EAAE;MACpB;IACJ,CAAC,CAAC;EACV,CAAC;EAEDC,MAAMA,CAAC;IACIf,YAAY,EAAEA,YAAY;IAC1BG,YAAY,EAAEA,YAAY;IAC1BC,UAAU,EAAEA,UAAU;IACtBC,aAAa,EAAEA,aAAa;IAC5BC,OAAO,EAAEA;EACb,CAAC,EAAE;IAEN,IAAIC,QAAQ,GAAG,IAAIC,QAAQ,EAAE;IAE7BD,QAAQ,CAACE,MAAM,CAAC,eAAe,EAAEN,YAAY,CAAC;IAC9CI,QAAQ,CAACE,MAAM,CAAC,SAAS,EAAEH,OAAO,CAAC;IAEnC,IAAIF,UAAU,KAAK,SAAS,EAAE;MAC1BG,QAAQ,CAACE,MAAM,CAAC,gBAAgB,EAAEJ,aAAa,CAAC;IACpD;IACA,IAAID,UAAU,KAAK,SAAS,EAAE;MAE1B;MACAG,QAAQ,CAACE,MAAM,CAAC,WAAW,EAAEJ,aAAa,CAACW,QAAQ,CAACC,IAAI,EAAE,CAAC;MAE3DZ,aAAa,CAACa,KAAK,CAACR,OAAO,CAAC,UAAUC,IAAI,EAAEC,KAAK,EAAE;QAC/CL,QAAQ,CAACE,MAAM,CAAE,eAAcG,KAAM,GAAE,EAAED,IAAI,CAAC;MAClD,CAAC,CAAC;IACN;IAEA,OAAOd,UAAU,CAACgB,IAAI,CAAE,GAAEf,QAAS,IAAGE,YAAa,SAAQ,EACvDO,QAAQ,EACR;MACIO,OAAO,EAAE;QACL,cAAc,EAAE;MACpB;IACJ,CAAC,CAAC;EACV,CAAC;EAEDK,gBAAgBA,CAACC,IAAI,EAAE;IACnB,OAAOvB,UAAU,CAACgB,IAAI,CACjB,WAAU,EAAE;MACTQ,UAAU,EAAED;IAChB,CAAC,CACJ;EACL;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}